// <auto-generated />
using System;
using Core.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Core.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.Domain.Entities.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ExpenseId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Title")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ExpenseId");

                    b.ToTable("Attachment");
                });

            modelBuilder.Entity("Core.Domain.Entities.BudgetJar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<Guid>("IconId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IncomeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<float>("Percentage")
                        .HasColumnType("real");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("IconId");

                    b.HasIndex("IncomeId");

                    b.ToTable("BudgetJars");
                });

            modelBuilder.Entity("Core.Domain.Entities.BudgetJarTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Archived")
                        .HasColumnType("boolean");

                    b.Property<Guid>("IconId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<float>("Percentage")
                        .HasColumnType("real");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("IconId");

                    b.ToTable("BudgetJarTemplates");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2f32317b-7ce2-469b-91fc-a277d300f667"),
                            Archived = false,
                            IconId = new Guid("b0445780-db7c-4d1e-9d42-3b125422c1a2"),
                            IsSystem = true,
                            Name = "Necessities",
                            Percentage = 55f,
                            UserId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("4adc7f4f-d3cd-4188-826c-410b729cfe8c"),
                            Archived = false,
                            IconId = new Guid("aa618108-0bad-42e9-b80a-b8e904478b99"),
                            IsSystem = true,
                            Name = "Long Term Saving",
                            Percentage = 10f,
                            UserId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("4ecd52ce-ba4d-45df-bd3b-ce7a412e118d"),
                            Archived = false,
                            IconId = new Guid("e0822b72-a427-445f-acc0-5dc08c8c3929"),
                            IsSystem = true,
                            Name = "Wants",
                            Percentage = 10f,
                            UserId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("7e7ad24e-cbf2-4a31-affe-cafa5c1a325c"),
                            Archived = false,
                            IconId = new Guid("2613db64-38d8-421c-9e73-c4fc2eb2c6df"),
                            IsSystem = true,
                            Name = "Education",
                            Percentage = 10f,
                            UserId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("eee63caf-e26a-4265-817c-259d47e14aba"),
                            Archived = false,
                            IconId = new Guid("0a55e9f4-ed2a-4ae5-8249-2aa9368efe88"),
                            IsSystem = true,
                            Name = "Financial Freedom",
                            Percentage = 10f,
                            UserId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("6b7c5ad3-82c5-4afc-ad66-a2a895a4bf7b"),
                            Archived = false,
                            IconId = new Guid("6b7c5ad3-82c5-4afc-ad66-a2a895a4bf7b"),
                            IsSystem = true,
                            Name = "Others",
                            Percentage = 5f,
                            UserId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("Core.Domain.Entities.Currency", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<string>("UnicodeDecimal")
                        .HasColumnType("text");

                    b.Property<string>("UnicodeHex")
                        .HasColumnType("text");

                    b.HasKey("Code");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Code = "ALL",
                            Text = "Albania Lek",
                            UnicodeDecimal = "76, 101, 107",
                            UnicodeHex = "4c, 65, 6b"
                        },
                        new
                        {
                            Code = "AFN",
                            Text = "Afghanistan Afghani",
                            UnicodeDecimal = "1547",
                            UnicodeHex = "60b"
                        },
                        new
                        {
                            Code = "ARS",
                            Text = "Argentina Peso",
                            UnicodeDecimal = "36",
                            UnicodeHex = "24"
                        },
                        new
                        {
                            Code = "AWG",
                            Text = "Aruba Guilder",
                            UnicodeDecimal = "402",
                            UnicodeHex = "192"
                        },
                        new
                        {
                            Code = "AUD",
                            Text = "Australia Dollar",
                            UnicodeDecimal = "36",
                            UnicodeHex = "24"
                        },
                        new
                        {
                            Code = "AZN",
                            Text = "Azerbaijan New Manat",
                            UnicodeDecimal = "1084, 1072, 1085",
                            UnicodeHex = "43c, 430, 43d"
                        },
                        new
                        {
                            Code = "BSD",
                            Text = "Bahamas Dollar",
                            UnicodeDecimal = "36",
                            UnicodeHex = "24"
                        },
                        new
                        {
                            Code = "BBD",
                            Text = "Barbados Dollar",
                            UnicodeDecimal = "36",
                            UnicodeHex = "24"
                        },
                        new
                        {
                            Code = "BYR",
                            Text = "Belarus Ruble",
                            UnicodeDecimal = "112, 46",
                            UnicodeHex = "70, 2e"
                        },
                        new
                        {
                            Code = "BZD",
                            Text = "Belize Dollar",
                            UnicodeDecimal = "66, 90, 36",
                            UnicodeHex = "42, 5a, 24"
                        },
                        new
                        {
                            Code = "BMD",
                            Text = "Bermuda Dollar",
                            UnicodeDecimal = "36",
                            UnicodeHex = "24"
                        },
                        new
                        {
                            Code = "BOB",
                            Text = "Bolivia Boliviano",
                            UnicodeDecimal = "36, 98",
                            UnicodeHex = "24, 62"
                        },
                        new
                        {
                            Code = "BAM",
                            Text = "Bosnia and Herzegovina Convertible Marka",
                            UnicodeDecimal = "75, 77",
                            UnicodeHex = "4b, 4d"
                        },
                        new
                        {
                            Code = "BWP",
                            Text = "Botswana Pula",
                            UnicodeDecimal = "80",
                            UnicodeHex = "50"
                        },
                        new
                        {
                            Code = "BGN",
                            Text = "Bulgaria Lev",
                            UnicodeDecimal = "1083, 1074",
                            UnicodeHex = "43b, 432"
                        },
                        new
                        {
                            Code = "BRL",
                            Text = "Brazil Real",
                            UnicodeDecimal = "82, 36",
                            UnicodeHex = "52, 24"
                        },
                        new
                        {
                            Code = "BND",
                            Text = "Brunei Darussalam Dollar",
                            UnicodeDecimal = "36",
                            UnicodeHex = "24"
                        },
                        new
                        {
                            Code = "KHR",
                            Text = "Cambodia Riel",
                            UnicodeDecimal = "6107",
                            UnicodeHex = "17db"
                        },
                        new
                        {
                            Code = "CAD",
                            Text = "Canada Dollar",
                            UnicodeDecimal = "36",
                            UnicodeHex = "24"
                        },
                        new
                        {
                            Code = "KYD",
                            Text = "Cayman Islands Dollar",
                            UnicodeDecimal = "36",
                            UnicodeHex = "24"
                        },
                        new
                        {
                            Code = "CLP",
                            Text = "Chile Peso",
                            UnicodeDecimal = "36",
                            UnicodeHex = "24"
                        },
                        new
                        {
                            Code = "CNY",
                            Text = "China Yuan Renminbi",
                            UnicodeDecimal = "165",
                            UnicodeHex = "a5"
                        },
                        new
                        {
                            Code = "COP",
                            Text = "Colombia Peso",
                            UnicodeDecimal = "36",
                            UnicodeHex = "24"
                        },
                        new
                        {
                            Code = "CRC",
                            Text = "Costa Rica Colon",
                            UnicodeDecimal = "8353",
                            UnicodeHex = "20a1"
                        },
                        new
                        {
                            Code = "HRK",
                            Text = "Croatia Kuna",
                            UnicodeDecimal = "107, 110",
                            UnicodeHex = "6b, 6e"
                        },
                        new
                        {
                            Code = "CUP",
                            Text = "Cuba Peso",
                            UnicodeDecimal = "8369",
                            UnicodeHex = "20b1"
                        },
                        new
                        {
                            Code = "CZK",
                            Text = "Czech Republic Koruna",
                            UnicodeDecimal = "75, 269",
                            UnicodeHex = "4b, 10d"
                        },
                        new
                        {
                            Code = "DKK",
                            Text = "Denmark Krone",
                            UnicodeDecimal = "107, 114",
                            UnicodeHex = "6b, 72"
                        },
                        new
                        {
                            Code = "DOP",
                            Text = "Dominican Republic Peso",
                            UnicodeDecimal = "82, 68, 36",
                            UnicodeHex = "52, 44, 24"
                        },
                        new
                        {
                            Code = "XCD",
                            Text = "East Caribbean Dollar",
                            UnicodeDecimal = "36",
                            UnicodeHex = "24"
                        },
                        new
                        {
                            Code = "EGP",
                            Text = "Egypt Pound",
                            UnicodeDecimal = "163",
                            UnicodeHex = "a3"
                        },
                        new
                        {
                            Code = "SVC",
                            Text = "El Salvador Colon",
                            UnicodeDecimal = "36",
                            UnicodeHex = "24"
                        },
                        new
                        {
                            Code = "EEK",
                            Text = "Estonia Kroon",
                            UnicodeDecimal = "107, 114",
                            UnicodeHex = "6b, 72"
                        },
                        new
                        {
                            Code = "EUR",
                            Text = "Euro Member Countries",
                            UnicodeDecimal = "8364",
                            UnicodeHex = "20ac"
                        },
                        new
                        {
                            Code = "FKP",
                            Text = "Falkland Islands (Malvinas) Pound",
                            UnicodeDecimal = "163",
                            UnicodeHex = "a3"
                        },
                        new
                        {
                            Code = "FJD",
                            Text = "Fiji Dollar",
                            UnicodeDecimal = "36",
                            UnicodeHex = "24"
                        },
                        new
                        {
                            Code = "GHC",
                            Text = "Ghana Cedis",
                            UnicodeDecimal = "162",
                            UnicodeHex = "a2"
                        },
                        new
                        {
                            Code = "GIP",
                            Text = "Gibraltar Pound",
                            UnicodeDecimal = "163",
                            UnicodeHex = "a3"
                        },
                        new
                        {
                            Code = "GTQ",
                            Text = "Guatemala Quetzal",
                            UnicodeDecimal = "81",
                            UnicodeHex = "51"
                        },
                        new
                        {
                            Code = "GGP",
                            Text = "Guernsey Pound",
                            UnicodeDecimal = "163",
                            UnicodeHex = "a3"
                        },
                        new
                        {
                            Code = "GYD",
                            Text = "Guyana Dollar",
                            UnicodeDecimal = "36",
                            UnicodeHex = "24"
                        },
                        new
                        {
                            Code = "HNL",
                            Text = "Honduras Lempira",
                            UnicodeDecimal = "76",
                            UnicodeHex = "4c"
                        },
                        new
                        {
                            Code = "HKD",
                            Text = "Hong Kong Dollar",
                            UnicodeDecimal = "36",
                            UnicodeHex = "24"
                        },
                        new
                        {
                            Code = "HUF",
                            Text = "Hungary Forint",
                            UnicodeDecimal = "70, 116",
                            UnicodeHex = "46, 74"
                        },
                        new
                        {
                            Code = "ISK",
                            Text = "Iceland Krona",
                            UnicodeDecimal = "107, 114",
                            UnicodeHex = "6b, 72"
                        },
                        new
                        {
                            Code = "INR",
                            Text = "India Rupee",
                            UnicodeDecimal = "",
                            UnicodeHex = ""
                        },
                        new
                        {
                            Code = "IDR",
                            Text = "Indonesia Rupiah",
                            UnicodeDecimal = "82, 112",
                            UnicodeHex = "52, 70"
                        },
                        new
                        {
                            Code = "IRR",
                            Text = "Iran Rial",
                            UnicodeDecimal = "65020",
                            UnicodeHex = "fdfc"
                        },
                        new
                        {
                            Code = "IMP",
                            Text = "Isle of Man Pound",
                            UnicodeDecimal = "163",
                            UnicodeHex = "a3"
                        },
                        new
                        {
                            Code = "ILS",
                            Text = "Israel Shekel",
                            UnicodeDecimal = "8362",
                            UnicodeHex = "20aa"
                        },
                        new
                        {
                            Code = "JMD",
                            Text = "Jamaica Dollar",
                            UnicodeDecimal = "74, 36",
                            UnicodeHex = "4a, 24"
                        },
                        new
                        {
                            Code = "JPY",
                            Text = "Japan Yen",
                            UnicodeDecimal = "165",
                            UnicodeHex = "a5"
                        },
                        new
                        {
                            Code = "JEP",
                            Text = "Jersey Pound",
                            UnicodeDecimal = "163",
                            UnicodeHex = "a3"
                        },
                        new
                        {
                            Code = "KZT",
                            Text = "Kazakhstan Tenge",
                            UnicodeDecimal = "1083, 1074",
                            UnicodeHex = "43b, 432"
                        },
                        new
                        {
                            Code = "KPW",
                            Text = "Korea (North) Won",
                            UnicodeDecimal = "8361",
                            UnicodeHex = "20a9"
                        },
                        new
                        {
                            Code = "KGS",
                            Text = "Kyrgyzstan Som",
                            UnicodeDecimal = "1083, 1074",
                            UnicodeHex = "43b, 432"
                        },
                        new
                        {
                            Code = "LAK",
                            Text = "Laos Kip",
                            UnicodeDecimal = "8365",
                            UnicodeHex = "20ad"
                        },
                        new
                        {
                            Code = "LVL",
                            Text = "Latvia Lat",
                            UnicodeDecimal = "76, 115",
                            UnicodeHex = "4c, 73"
                        },
                        new
                        {
                            Code = "LBP",
                            Text = "Lebanon Pound",
                            UnicodeDecimal = "163",
                            UnicodeHex = "a3"
                        },
                        new
                        {
                            Code = "LRD",
                            Text = "Liberia Dollar",
                            UnicodeDecimal = "36",
                            UnicodeHex = "24"
                        },
                        new
                        {
                            Code = "LTL",
                            Text = "Lithuania Litas",
                            UnicodeDecimal = "76, 116",
                            UnicodeHex = "4c, 74"
                        },
                        new
                        {
                            Code = "MKD",
                            Text = "Macedonia Denar",
                            UnicodeDecimal = "1076, 1077, 1085",
                            UnicodeHex = "434, 435, 43d"
                        },
                        new
                        {
                            Code = "MYR",
                            Text = "Malaysia Ringgit",
                            UnicodeDecimal = "82, 77",
                            UnicodeHex = "52, 4d"
                        },
                        new
                        {
                            Code = "MUR",
                            Text = "Mauritius Rupee",
                            UnicodeDecimal = "8360",
                            UnicodeHex = "20a8"
                        },
                        new
                        {
                            Code = "MXN",
                            Text = "Mexico Peso",
                            UnicodeDecimal = "36",
                            UnicodeHex = "24"
                        },
                        new
                        {
                            Code = "MNT",
                            Text = "Mongolia Tughrik",
                            UnicodeDecimal = "8366",
                            UnicodeHex = "20ae"
                        },
                        new
                        {
                            Code = "MZN",
                            Text = "Mozambique Metical",
                            UnicodeDecimal = "77, 84",
                            UnicodeHex = "4d, 54"
                        },
                        new
                        {
                            Code = "NAD",
                            Text = "Namibia Dollar",
                            UnicodeDecimal = "36",
                            UnicodeHex = "24"
                        },
                        new
                        {
                            Code = "NPR",
                            Text = "Nepal Rupee",
                            UnicodeDecimal = "8360",
                            UnicodeHex = "20a8"
                        },
                        new
                        {
                            Code = "ANG",
                            Text = "Netherlands Antilles Guilder",
                            UnicodeDecimal = "402",
                            UnicodeHex = "192"
                        },
                        new
                        {
                            Code = "NZD",
                            Text = "New Zealand Dollar",
                            UnicodeDecimal = "36",
                            UnicodeHex = "24"
                        },
                        new
                        {
                            Code = "NIO",
                            Text = "Nicaragua Cordoba",
                            UnicodeDecimal = "67, 36",
                            UnicodeHex = "43, 24"
                        },
                        new
                        {
                            Code = "NGN",
                            Text = "Nigeria Naira",
                            UnicodeDecimal = "8358",
                            UnicodeHex = "20a6"
                        },
                        new
                        {
                            Code = "NOK",
                            Text = "Norway Krone",
                            UnicodeDecimal = "107, 114",
                            UnicodeHex = "6b, 72"
                        },
                        new
                        {
                            Code = "OMR",
                            Text = "Oman Rial",
                            UnicodeDecimal = "65020",
                            UnicodeHex = "fdfc"
                        },
                        new
                        {
                            Code = "PKR",
                            Text = "Pakistan Rupee",
                            UnicodeDecimal = "8360",
                            UnicodeHex = "20a8"
                        },
                        new
                        {
                            Code = "PAB",
                            Text = "Panama Balboa",
                            UnicodeDecimal = "66, 47, 46",
                            UnicodeHex = "42, 2f, 2e"
                        },
                        new
                        {
                            Code = "PYG",
                            Text = "Paraguay Guarani",
                            UnicodeDecimal = "71, 115",
                            UnicodeHex = "47, 73"
                        },
                        new
                        {
                            Code = "PEN",
                            Text = "Peru Nuevo Sol",
                            UnicodeDecimal = "83, 47, 46",
                            UnicodeHex = "53, 2f, 2e"
                        },
                        new
                        {
                            Code = "PHP",
                            Text = "Philippines Peso",
                            UnicodeDecimal = "8369",
                            UnicodeHex = "20b1"
                        },
                        new
                        {
                            Code = "PLN",
                            Text = "Poland Zloty",
                            UnicodeDecimal = "122, 322",
                            UnicodeHex = "7a, 142"
                        },
                        new
                        {
                            Code = "QAR",
                            Text = "Qatar Riyal",
                            UnicodeDecimal = "65020",
                            UnicodeHex = "fdfc"
                        },
                        new
                        {
                            Code = "RON",
                            Text = "Romania New Leu",
                            UnicodeDecimal = "108, 101, 105",
                            UnicodeHex = "6c, 65, 69"
                        },
                        new
                        {
                            Code = "RUB",
                            Text = "Russia Ruble",
                            UnicodeDecimal = "1088, 1091, 1073",
                            UnicodeHex = "440, 443, 431"
                        },
                        new
                        {
                            Code = "SHP",
                            Text = "Saint Helena Pound",
                            UnicodeDecimal = "163",
                            UnicodeHex = "a3"
                        },
                        new
                        {
                            Code = "SAR",
                            Text = "Saudi Arabia Riyal",
                            UnicodeDecimal = "65020",
                            UnicodeHex = "fdfc"
                        },
                        new
                        {
                            Code = "RSD",
                            Text = "Serbia Dinar",
                            UnicodeDecimal = "1044, 1080, 1085, 46",
                            UnicodeHex = "414, 438, 43d, 2e"
                        },
                        new
                        {
                            Code = "SCR",
                            Text = "Seychelles Rupee",
                            UnicodeDecimal = "8360",
                            UnicodeHex = "20a8"
                        },
                        new
                        {
                            Code = "SGD",
                            Text = "Singapore Dollar",
                            UnicodeDecimal = "36",
                            UnicodeHex = "24"
                        },
                        new
                        {
                            Code = "SBD",
                            Text = "Solomon Islands Dollar",
                            UnicodeDecimal = "36",
                            UnicodeHex = "24"
                        },
                        new
                        {
                            Code = "SOS",
                            Text = "Somalia Shilling",
                            UnicodeDecimal = "83",
                            UnicodeHex = "53"
                        },
                        new
                        {
                            Code = "ZAR",
                            Text = "South Africa Rand",
                            UnicodeDecimal = "82",
                            UnicodeHex = "52"
                        },
                        new
                        {
                            Code = "KRW",
                            Text = "Korea (South) Won",
                            UnicodeDecimal = "8361",
                            UnicodeHex = "20a9"
                        },
                        new
                        {
                            Code = "LKR",
                            Text = "Sri Lanka Rupee",
                            UnicodeDecimal = "8360",
                            UnicodeHex = "20a8"
                        },
                        new
                        {
                            Code = "SEK",
                            Text = "Sweden Krona",
                            UnicodeDecimal = "107, 114",
                            UnicodeHex = "6b, 72"
                        },
                        new
                        {
                            Code = "CHF",
                            Text = "Switzerland Franc",
                            UnicodeDecimal = "67, 72, 70",
                            UnicodeHex = "43, 48, 46"
                        },
                        new
                        {
                            Code = "SRD",
                            Text = "Suriname Dollar",
                            UnicodeDecimal = "36",
                            UnicodeHex = "24"
                        },
                        new
                        {
                            Code = "SYP",
                            Text = "Syria Pound",
                            UnicodeDecimal = "163",
                            UnicodeHex = "a3"
                        },
                        new
                        {
                            Code = "TWD",
                            Text = "Taiwan New Dollar",
                            UnicodeDecimal = "78, 84, 36",
                            UnicodeHex = "4e, 54, 24"
                        },
                        new
                        {
                            Code = "THB",
                            Text = "Thailand Baht",
                            UnicodeDecimal = "3647",
                            UnicodeHex = "e3f"
                        },
                        new
                        {
                            Code = "TTD",
                            Text = "Trinidad and Tobago Dollar",
                            UnicodeDecimal = "84, 84, 36",
                            UnicodeHex = "54, 54, 24"
                        },
                        new
                        {
                            Code = "TRY",
                            Text = "Turkey Lira",
                            UnicodeDecimal = "",
                            UnicodeHex = ""
                        },
                        new
                        {
                            Code = "TRL",
                            Text = "Turkey Lira",
                            UnicodeDecimal = "8356",
                            UnicodeHex = "20a4"
                        },
                        new
                        {
                            Code = "TVD",
                            Text = "Tuvalu Dollar",
                            UnicodeDecimal = "36",
                            UnicodeHex = "24"
                        },
                        new
                        {
                            Code = "UAH",
                            Text = "Ukraine Hryvna",
                            UnicodeDecimal = "8372",
                            UnicodeHex = "20b4"
                        },
                        new
                        {
                            Code = "GBP",
                            Text = "United Kingdom Pound",
                            UnicodeDecimal = "163",
                            UnicodeHex = "a3"
                        },
                        new
                        {
                            Code = "USD",
                            Text = "United States Dollar",
                            UnicodeDecimal = "36",
                            UnicodeHex = "24"
                        },
                        new
                        {
                            Code = "UYU",
                            Text = "Uruguay Peso",
                            UnicodeDecimal = "36, 85",
                            UnicodeHex = "24, 55"
                        },
                        new
                        {
                            Code = "UZS",
                            Text = "Uzbekistan Som",
                            UnicodeDecimal = "1083, 1074",
                            UnicodeHex = "43b, 432"
                        },
                        new
                        {
                            Code = "VEF",
                            Text = "Venezuela Bolivar",
                            UnicodeDecimal = "66, 115",
                            UnicodeHex = "42, 73"
                        },
                        new
                        {
                            Code = "VND",
                            Text = "Viet Nam Dong",
                            UnicodeDecimal = "8363",
                            UnicodeHex = "20ab"
                        },
                        new
                        {
                            Code = "YER",
                            Text = "Yemen Rial",
                            UnicodeDecimal = "65020",
                            UnicodeHex = "fdfc"
                        },
                        new
                        {
                            Code = "ZWD",
                            Text = "Zimbabwe Dollar",
                            UnicodeDecimal = "90, 36",
                            UnicodeHex = "5a, 24"
                        });
                });

            modelBuilder.Entity("Core.Domain.Entities.Expense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<bool>("Archived")
                        .HasColumnType("boolean");

                    b.Property<Guid>("BudgetJarId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("ExpenseGroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsTaxable")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("PaidDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Payee")
                        .HasColumnType("text");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("integer");

                    b.Property<int?>("RecurrentExpenseId")
                        .HasColumnType("integer");

                    b.Property<string>("Ref")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BudgetJarId");

                    b.HasIndex("ExpenseGroupId");

                    b.HasIndex("PaidDate");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("Core.Domain.Entities.ExpenseGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("IconId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("IconId");

                    b.ToTable("ExpenseGroups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8d5d29e8-dd5a-4971-b1b0-a50a4bf4c73c"),
                            IconId = new Guid("8d5d29e8-dd5a-4971-b1b0-a50a4bf4c73c"),
                            IsSystem = true,
                            Name = "Grocery",
                            UserId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("d6552f54-0c69-431e-9907-34147dd2c029"),
                            IconId = new Guid("d6552f54-0c69-431e-9907-34147dd2c029"),
                            IsSystem = true,
                            Name = "Clothes",
                            UserId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("2613db64-38d8-421c-9e73-c4fc2eb2c6df"),
                            IconId = new Guid("2613db64-38d8-421c-9e73-c4fc2eb2c6df"),
                            IsSystem = true,
                            Name = "Education",
                            UserId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("6370331d-d544-41b8-ad67-a0cfc0756975"),
                            IconId = new Guid("6370331d-d544-41b8-ad67-a0cfc0756975"),
                            IsSystem = true,
                            Name = "Eat Out",
                            UserId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("ee676e1c-6a69-41ae-8b3b-b2dac73b9751"),
                            IconId = new Guid("ee676e1c-6a69-41ae-8b3b-b2dac73b9751"),
                            IsSystem = true,
                            Name = "Transport",
                            UserId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("5b311b51-d25d-459e-9d1c-b4e1b199edab"),
                            IconId = new Guid("5b311b51-d25d-459e-9d1c-b4e1b199edab"),
                            IsSystem = true,
                            Name = "Utilities",
                            UserId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("6550b905-6763-4e97-9038-50ec50d68853"),
                            IconId = new Guid("6550b905-6763-4e97-9038-50ec50d68853"),
                            IsSystem = true,
                            Name = "Medicines",
                            UserId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("84478ca2-0873-4dac-a279-6cc2bd20b22c"),
                            IconId = new Guid("84478ca2-0873-4dac-a279-6cc2bd20b22c"),
                            IsSystem = true,
                            Name = "Investment",
                            UserId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("f58fb384-e35e-4b15-bbfd-428642178fbc"),
                            IconId = new Guid("f58fb384-e35e-4b15-bbfd-428642178fbc"),
                            IsSystem = true,
                            Name = "Family",
                            UserId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("8ec17bda-749c-4089-8511-bce5cea403aa"),
                            IconId = new Guid("8ec17bda-749c-4089-8511-bce5cea403aa"),
                            IsSystem = true,
                            Name = "Furniture",
                            UserId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("68dc6416-6d0b-4e63-b9ff-42c68d3b96f4"),
                            IconId = new Guid("68dc6416-6d0b-4e63-b9ff-42c68d3b96f4"),
                            IsSystem = true,
                            Name = "Petro",
                            UserId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("e54521ec-1d1c-41f0-8353-bc3b62485f25"),
                            IconId = new Guid("e54521ec-1d1c-41f0-8353-bc3b62485f25"),
                            IsSystem = true,
                            Name = "Car",
                            UserId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("f348aa99-c779-4b7c-a8bd-d96502ee2692"),
                            IconId = new Guid("f348aa99-c779-4b7c-a8bd-d96502ee2692"),
                            IsSystem = true,
                            Name = "Insurance",
                            UserId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("bc0a7db7-2eed-415f-9076-08dab2e93933"),
                            IconId = new Guid("bc0a7db7-2eed-415f-9076-08dab2e93933"),
                            IsSystem = true,
                            Name = "Toys",
                            UserId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("1137ee8a-9a4e-4625-be8e-0612b6a20bc4"),
                            IconId = new Guid("1137ee8a-9a4e-4625-be8e-0612b6a20bc4"),
                            IsSystem = true,
                            Name = "Donate",
                            UserId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("ea2978ef-f900-4b01-b0f0-90afe13e0a55"),
                            IconId = new Guid("ea2978ef-f900-4b01-b0f0-90afe13e0a55"),
                            IsSystem = true,
                            Name = "Households",
                            UserId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("44a67dfd-6a7d-4dbe-b8cf-82d25db8dbbc"),
                            IconId = new Guid("44a67dfd-6a7d-4dbe-b8cf-82d25db8dbbc"),
                            IsSystem = true,
                            Name = "Gardens",
                            UserId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("70d3e625-cf3b-4eca-a773-f1fb5e340c64"),
                            IconId = new Guid("70d3e625-cf3b-4eca-a773-f1fb5e340c64"),
                            IsSystem = true,
                            Name = "Sports",
                            UserId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("6b7c5ad3-82c5-4afc-ad66-a2a895a4bf7b"),
                            IconId = new Guid("6b7c5ad3-82c5-4afc-ad66-a2a895a4bf7b"),
                            IsSystem = true,
                            Name = "Others",
                            UserId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("Core.Domain.Entities.Icon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Archived")
                        .HasColumnType("boolean");

                    b.Property<int>("IconType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Icons");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b0445780-db7c-4d1e-9d42-3b125422c1a2"),
                            Archived = false,
                            IconType = 0,
                            IsHidden = false,
                            Name = "Necessities",
                            Path = "/assets/icons/necessities.png"
                        },
                        new
                        {
                            Id = new Guid("aa618108-0bad-42e9-b80a-b8e904478b99"),
                            Archived = false,
                            IconType = 0,
                            IsHidden = false,
                            Name = "Long Term Saving",
                            Path = "/assets/icons/long-term-saving.png"
                        },
                        new
                        {
                            Id = new Guid("e0822b72-a427-445f-acc0-5dc08c8c3929"),
                            Archived = false,
                            IconType = 0,
                            IsHidden = false,
                            Name = "Wants",
                            Path = "/assets/icons/wants.png"
                        },
                        new
                        {
                            Id = new Guid("2613db64-38d8-421c-9e73-c4fc2eb2c6df"),
                            Archived = false,
                            IconType = 0,
                            IsHidden = false,
                            Name = "Education",
                            Path = "/assets/icons/education.png"
                        },
                        new
                        {
                            Id = new Guid("0a55e9f4-ed2a-4ae5-8249-2aa9368efe88"),
                            Archived = false,
                            IconType = 0,
                            IsHidden = false,
                            Name = "Financial Freedom",
                            Path = "/assets/icons/financial-freedom.png"
                        },
                        new
                        {
                            Id = new Guid("8d5d29e8-dd5a-4971-b1b0-a50a4bf4c73c"),
                            Archived = false,
                            IconType = 0,
                            IsHidden = false,
                            Name = "Grocery",
                            Path = "/assets/icons/grocery.png"
                        },
                        new
                        {
                            Id = new Guid("d6552f54-0c69-431e-9907-34147dd2c029"),
                            Archived = false,
                            IconType = 0,
                            IsHidden = false,
                            Name = "Clothes",
                            Path = "/assets/icons/clothes.png"
                        },
                        new
                        {
                            Id = new Guid("6370331d-d544-41b8-ad67-a0cfc0756975"),
                            Archived = false,
                            IconType = 0,
                            IsHidden = false,
                            Name = "Eat Out",
                            Path = "/assets/icons/eat-out.png"
                        },
                        new
                        {
                            Id = new Guid("ee676e1c-6a69-41ae-8b3b-b2dac73b9751"),
                            Archived = false,
                            IconType = 0,
                            IsHidden = false,
                            Name = "Transport",
                            Path = "/assets/icons/transport.png"
                        },
                        new
                        {
                            Id = new Guid("5b311b51-d25d-459e-9d1c-b4e1b199edab"),
                            Archived = false,
                            IconType = 0,
                            IsHidden = false,
                            Name = "Utilities",
                            Path = "/assets/icons/utilities.png"
                        },
                        new
                        {
                            Id = new Guid("6550b905-6763-4e97-9038-50ec50d68853"),
                            Archived = false,
                            IconType = 0,
                            IsHidden = false,
                            Name = "Medicines",
                            Path = "/assets/icons/medicine.png"
                        },
                        new
                        {
                            Id = new Guid("84478ca2-0873-4dac-a279-6cc2bd20b22c"),
                            Archived = false,
                            IconType = 0,
                            IsHidden = false,
                            Name = "Investment",
                            Path = "/assets/icons/investment.png"
                        },
                        new
                        {
                            Id = new Guid("f58fb384-e35e-4b15-bbfd-428642178fbc"),
                            Archived = false,
                            IconType = 0,
                            IsHidden = false,
                            Name = "Family",
                            Path = "/assets/icons/family.png"
                        },
                        new
                        {
                            Id = new Guid("8ec17bda-749c-4089-8511-bce5cea403aa"),
                            Archived = false,
                            IconType = 0,
                            IsHidden = false,
                            Name = "Furniture",
                            Path = "/assets/icons/furniture.png"
                        },
                        new
                        {
                            Id = new Guid("68dc6416-6d0b-4e63-b9ff-42c68d3b96f4"),
                            Archived = false,
                            IconType = 0,
                            IsHidden = false,
                            Name = "Petro",
                            Path = "/assets/icons/petro.png"
                        },
                        new
                        {
                            Id = new Guid("e54521ec-1d1c-41f0-8353-bc3b62485f25"),
                            Archived = false,
                            IconType = 0,
                            IsHidden = false,
                            Name = "Car",
                            Path = "/assets/icons/car.png"
                        },
                        new
                        {
                            Id = new Guid("f348aa99-c779-4b7c-a8bd-d96502ee2692"),
                            Archived = false,
                            IconType = 0,
                            IsHidden = false,
                            Name = "Insurance",
                            Path = "/assets/icons/insurance.png"
                        },
                        new
                        {
                            Id = new Guid("bc0a7db7-2eed-415f-9076-08dab2e93933"),
                            Archived = false,
                            IconType = 0,
                            IsHidden = false,
                            Name = "Toys",
                            Path = "/assets/icons/toy.png"
                        },
                        new
                        {
                            Id = new Guid("1137ee8a-9a4e-4625-be8e-0612b6a20bc4"),
                            Archived = false,
                            IconType = 0,
                            IsHidden = false,
                            Name = "Donate",
                            Path = "/assets/icons/donate.png"
                        },
                        new
                        {
                            Id = new Guid("ea2978ef-f900-4b01-b0f0-90afe13e0a55"),
                            Archived = false,
                            IconType = 0,
                            IsHidden = false,
                            Name = "Households",
                            Path = "/assets/icons/household-items.png"
                        },
                        new
                        {
                            Id = new Guid("44a67dfd-6a7d-4dbe-b8cf-82d25db8dbbc"),
                            Archived = false,
                            IconType = 0,
                            IsHidden = false,
                            Name = "Gardens",
                            Path = "/assets/icons/garden.png"
                        },
                        new
                        {
                            Id = new Guid("70d3e625-cf3b-4eca-a773-f1fb5e340c64"),
                            Archived = false,
                            IconType = 0,
                            IsHidden = false,
                            Name = "Sports",
                            Path = "/assets/icons/sports.png"
                        },
                        new
                        {
                            Id = new Guid("05269476-13c6-451d-9259-5bcf2480ef1e"),
                            Archived = false,
                            IconType = 0,
                            IsHidden = false,
                            Name = "Baby",
                            Path = "/assets/icons/baby.png"
                        },
                        new
                        {
                            Id = new Guid("4006be63-25d4-4425-9702-2ba10dc721bb"),
                            Archived = false,
                            IconType = 0,
                            IsHidden = false,
                            Name = "Travel",
                            Path = "/assets/icons/travel.png"
                        },
                        new
                        {
                            Id = new Guid("52afbf57-54d3-4fe6-a680-40375679b5ff"),
                            Archived = false,
                            IconType = 0,
                            IsHidden = false,
                            Name = "Holiday",
                            Path = "/assets/icons/holiday.png"
                        },
                        new
                        {
                            Id = new Guid("9392f6a9-f9aa-4d9e-9ab2-8d89ba455ea9"),
                            Archived = false,
                            IconType = 0,
                            IsHidden = false,
                            Name = "Vaccation",
                            Path = "/assets/icons/vaccation.png"
                        },
                        new
                        {
                            Id = new Guid("56f4421e-10b6-4940-b594-01de569fde12"),
                            Archived = false,
                            IconType = 0,
                            IsHidden = false,
                            Name = "Saving",
                            Path = "/assets/icons/Saving.png"
                        },
                        new
                        {
                            Id = new Guid("79cf43bd-c6d4-4834-b677-52c9b359473e"),
                            Archived = false,
                            IconType = 0,
                            IsHidden = false,
                            Name = "Honey Moon",
                            Path = "/assets/icons/honeymoon.png"
                        },
                        new
                        {
                            Id = new Guid("4bb8d462-187a-4370-bb1e-e0fb99d233e0"),
                            Archived = false,
                            IconType = 0,
                            IsHidden = false,
                            Name = "Bakery",
                            Path = "/assets/icons/bakery.png"
                        },
                        new
                        {
                            Id = new Guid("476501c2-92df-4e9f-a863-dfd93dd937c0"),
                            Archived = false,
                            IconType = 0,
                            IsHidden = false,
                            Name = "Marry",
                            Path = "/assets/icons/marry.png"
                        },
                        new
                        {
                            Id = new Guid("2f67a4c3-7186-47da-9ead-407be93a675e"),
                            Archived = false,
                            IconType = 0,
                            IsHidden = false,
                            Name = "Gas",
                            Path = "/assets/icons/gas.png"
                        },
                        new
                        {
                            Id = new Guid("b028a67a-b2e3-44a7-953f-de1c0959262b"),
                            Archived = false,
                            IconType = 0,
                            IsHidden = false,
                            Name = "Electricity",
                            Path = "/assets/icons/electricity.png"
                        },
                        new
                        {
                            Id = new Guid("f0ffaf46-dde9-47e0-a9f1-d64785d4dfe7"),
                            Archived = false,
                            IconType = 0,
                            IsHidden = false,
                            Name = "Gift",
                            Path = "/assets/icons/gift.png"
                        },
                        new
                        {
                            Id = new Guid("e1fc64f8-3154-4880-9732-37b5615592bd"),
                            Archived = false,
                            IconType = 0,
                            IsHidden = false,
                            Name = "Shirt",
                            Path = "/assets/icons/shirt.png"
                        },
                        new
                        {
                            Id = new Guid("8470c1bc-d85c-4f94-9133-b1ba2945f7f2"),
                            Archived = false,
                            IconType = 0,
                            IsHidden = false,
                            Name = "Jeans",
                            Path = "/assets/icons/jeans.png"
                        },
                        new
                        {
                            Id = new Guid("eff825bc-673f-43e3-a422-1df323bf274d"),
                            Archived = false,
                            IconType = 0,
                            IsHidden = false,
                            Name = "Tools",
                            Path = "/assets/icons/tools.png"
                        },
                        new
                        {
                            Id = new Guid("6b7c5ad3-82c5-4afc-ad66-a2a895a4bf7b"),
                            Archived = false,
                            IconType = 0,
                            IsHidden = false,
                            Name = "Others",
                            Path = "/assets/icons/others.png"
                        });
                });

            modelBuilder.Entity("Core.Domain.Entities.Income", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<bool>("Archived")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Begin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Incomes");
                });

            modelBuilder.Entity("Core.Domain.Entities.PageHtml", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Title")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.ToTable("PageHtmls");
                });

            modelBuilder.Entity("Core.Domain.Entities.RecurrentExpense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<Guid>("BudgetJarId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("ExpenseGroupId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsTaxable")
                        .HasColumnType("boolean");

                    b.Property<string>("Payee")
                        .HasColumnType("text");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("integer");

                    b.Property<string>("Ref")
                        .HasColumnType("text");

                    b.Property<int>("Repeat")
                        .HasColumnType("integer");

                    b.Property<string>("RepeatDaily")
                        .HasColumnType("text");

                    b.Property<int>("RepeatDay")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BudgetJarId");

                    b.HasIndex("ExpenseGroupId");

                    b.ToTable("RecurrentExpenses");
                });

            modelBuilder.Entity("Core.Domain.Entities.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Archived")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Begin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<DateTime?>("End")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaidGateway")
                        .HasColumnType("text");

                    b.Property<string>("PaidRef")
                        .HasColumnType("text");

                    b.Property<int>("PaymentCycle")
                        .HasColumnType("integer");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("integer");

                    b.Property<int>("SubscriptionType")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("Core.Domain.Entities.SysAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SysAttributes");
                });

            modelBuilder.Entity("Core.Infrastructure.Database.Identity.AppIdentityRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9b78ce40-633a-48b5-99e3-d1cc5c753fbe"),
                            ConcurrencyStamp = "ed98686e-55df-42d6-89f2-0cd160397493",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("6a9ae0f3-285d-450b-96e5-413362fae4a6"),
                            ConcurrencyStamp = "e3ea3189-3f74-4c89-bb4e-5f470458dc56",
                            Name = "user",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Core.Infrastructure.Database.Identity.AppIdentityUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("CultureInfo")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("TimeZone")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Entities.Attachment", b =>
                {
                    b.HasOne("Core.Domain.Entities.Expense", null)
                        .WithMany("Attachments")
                        .HasForeignKey("ExpenseId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Core.Domain.Entities.BudgetJar", b =>
                {
                    b.HasOne("Core.Domain.Entities.Icon", "Icon")
                        .WithMany()
                        .HasForeignKey("IconId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Core.Domain.Entities.Income", null)
                        .WithMany("BudgetJars")
                        .HasForeignKey("IncomeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Icon");
                });

            modelBuilder.Entity("Core.Domain.Entities.BudgetJarTemplate", b =>
                {
                    b.HasOne("Core.Domain.Entities.Icon", "Icon")
                        .WithMany()
                        .HasForeignKey("IconId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Icon");
                });

            modelBuilder.Entity("Core.Domain.Entities.Expense", b =>
                {
                    b.HasOne("Core.Domain.Entities.BudgetJar", "BudgetJar")
                        .WithMany()
                        .HasForeignKey("BudgetJarId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Core.Domain.Entities.ExpenseGroup", "ExpenseGroup")
                        .WithMany()
                        .HasForeignKey("ExpenseGroupId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("BudgetJar");

                    b.Navigation("ExpenseGroup");
                });

            modelBuilder.Entity("Core.Domain.Entities.ExpenseGroup", b =>
                {
                    b.HasOne("Core.Domain.Entities.Icon", "Icon")
                        .WithMany()
                        .HasForeignKey("IconId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Icon");
                });

            modelBuilder.Entity("Core.Domain.Entities.RecurrentExpense", b =>
                {
                    b.HasOne("Core.Domain.Entities.BudgetJar", "BudgetJar")
                        .WithMany()
                        .HasForeignKey("BudgetJarId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Core.Domain.Entities.ExpenseGroup", "ExpenseGroup")
                        .WithMany()
                        .HasForeignKey("ExpenseGroupId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("BudgetJar");

                    b.Navigation("ExpenseGroup");
                });

            modelBuilder.Entity("Core.Domain.Entities.Subscription", b =>
                {
                    b.HasOne("Core.Infrastructure.Database.Identity.AppIdentityUser", null)
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Core.Infrastructure.Database.Identity.AppIdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Core.Infrastructure.Database.Identity.AppIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Core.Infrastructure.Database.Identity.AppIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Core.Infrastructure.Database.Identity.AppIdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Infrastructure.Database.Identity.AppIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Core.Infrastructure.Database.Identity.AppIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.Entities.Expense", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("Core.Domain.Entities.Income", b =>
                {
                    b.Navigation("BudgetJars");
                });

            modelBuilder.Entity("Core.Infrastructure.Database.Identity.AppIdentityUser", b =>
                {
                    b.Navigation("Subscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
