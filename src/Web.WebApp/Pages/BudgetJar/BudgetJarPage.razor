@page "/budgetjars";
@using AutoMapper
@using Core.Application.Mediator.BudgetJars
@using Core.Application.Mediator.Icons
@using Core.Application.Models
@using MediatR

<SetPageTitle Value="@($"{DefaultConstants.PageTitle} - Budget Jars")" />

<MudContainer Class="mt-8" MaxWidth="@MaxWidth.ExtraLarge">
    <Breadcrumbs>
        <BreadcrumbsItem Title="Budget Jar" />
    </Breadcrumbs>
    <MudCard Outlined="true" Class="p-3" Style="position: relative;">
        <MudCardContent>
            <MudContainer MaxWidth="@MaxWidth.Medium">
                <div class="budgetjar-cards">
                @if (budgetJars.Any())
                {
                    foreach (BudgetJarModel budgetJar in budgetJars)
                    {
                        <BudgetJarCard @key="@budgetJar.Id" BudgetJar="@budgetJar" TotalPercentages="@totalPercentages"
                            IconSet="@iconSet" OnUpdated="@HandleBudgetJarUpdated" OnDeleted="@HandleBudgetJarDeleted" IsNew="@budgetJar.IsNew" />
                    }
                }
                    <MudCard Outlined="true" Class="budgetjar-card budgetjar-card-addnew" @onclick="@AddNewClick">
                        <MudCardContent Style="padding-top: 0; text-align: center;">
                            <MudIcon Icon="@Icons.Material.Filled.Add" Class="icon" />
                            <MudText>Add New</MudText>
                        </MudCardContent>
                    </MudCard>
                </div>
            </MudContainer>
            <AppOverlay IsLoading="@isLoading" />
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    [Inject] IMediator Mediator { get; set; }
    [Inject] IMapper Mapper { get; set; }
    [Inject] NavigationManager NavigationManager { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }

    [CascadingParameter]
    public UserDto AuthUser { get; set; } = default;

    private bool isLoading;
    private List<BudgetJarModel> budgetJars = new List<BudgetJarModel>();
    private float totalPercentages;
    private IconDto[] iconSet = Array.Empty<IconDto>();

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        var budgetJarsDto = await Mediator.Send(new GetBudgetJarsByUserId(AuthUser.Id));
        budgetJars = budgetJarsDto.OrderByDescending(x => x.Percentage).Select(x => new BudgetJarModel(x)).ToList();
        totalPercentages = budgetJars.Sum(x => x.Percentage);

        iconSet = (await Mediator.Send(new GetIconsQuery())).ToArray();
        isLoading = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        // If there is none, create from system templates
        if (!budgetJars.Any())
        {
            isLoading = true;
            var budgetJarsDto = await Mediator.Send(new CreateBudgetJarsFromDefault(AuthUser.Id));
            budgetJars = budgetJarsDto.OrderByDescending(x => x.Percentage).Select(x => new BudgetJarModel(x)).ToList();
            totalPercentages = budgetJars.Sum(x => x.Percentage);
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleBudgetJarUpdated(BudgetJarDto result)
    {
        var budgetJar = budgetJars.Single(x => x.Id == result.Id);
        budgetJar.IconId = result.IconId;
        budgetJar.Icon = result.Icon;
        budgetJar.Name = result.Name;
        budgetJar.Percentage = result.Percentage;
        budgetJar.IsDefault = false;
        await Mediator.Send(new SaveBudgetJarCommand(budgetJar));
        budgetJar.IsNew = false;

        totalPercentages = budgetJars.Sum(x => x.Percentage);
        StateHasChanged();
    }

    private async Task HandleBudgetJarDeleted(Guid id)
    {
        budgetJars = budgetJars.Where(x => x.Id != id).ToList();
        totalPercentages = budgetJars.Sum(x => x.Percentage);
        await Mediator.Send(new DeleteBudgetJarCommand(id, false));
        StateHasChanged();
    }

    private void AddNewClick()
    {
        var icon = Mapper.Map<IconDto>(DefaultConstants.DefaultIcon);
        budgetJars.Add(new BudgetJarModel()
        {
            Id = Guid.NewGuid(),
            UserId = AuthUser.Id,
            Name = "",
            IsDefault = false,
            TotalBalance = 0,
            Percentage = 0,
            IconId = icon.Id,
            Icon = icon,
            IsNew = true
        });
    }

    protected class BudgetJarModel : BudgetJarDto
    {
        public bool IsNew { get; set; }

        public BudgetJarModel(){}

        public BudgetJarModel(BudgetJarDto budgetJar)
        {
            IsNew = false;
            Id = budgetJar.Id;
            UserId = budgetJar.UserId;
            Name = budgetJar.Name;
            Percentage = budgetJar.Percentage;
            IsDefault = false;
            IconId = budgetJar.IconId;
            Icon = budgetJar.Icon;
        }
    }
}
