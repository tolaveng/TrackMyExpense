@page "/budgetjars";
@using AutoMapper
@using Core.Application.Mediator.BudgetJars
@using Core.Application.Mediator.Icons
@using Core.Application.Models
@using Core.Application.Utils
@using MediatR

<SetPageTitle Value="@($"{DefaultConstants.PageTitle} - Budget Jars")" />

<MudContainer Class="mt-8" MaxWidth="@MaxWidth.ExtraLarge">
    <Breadcrumbs>
        <BreadcrumbsItem Title="Budget Jar" />
    </Breadcrumbs>
    <MudCard Outlined="true" Class="p-3" Style="position: relative;">
        <MudCardContent>
            <MudContainer MaxWidth="@MaxWidth.Medium">
                <MudText Typo="Typo.h6">Current balance: @(CurrencyUtil.Formatted(totalBalance, cultureInfo))</MudText>
                <br/>
                <div class="budgetjar-cards">
                @if (budgetJars.Any())
                {
                    foreach (BudgetJarModel budgetJar in budgetJars)
                    {
                        <BudgetJarCard @key="@budgetJar.Id" BudgetJar="@budgetJar" TotalPercentages="@totalPercentages"
                            IconSet="@iconSet" OnUpdated="@HandleBudgetJarUpdated" OnDeleted="@HandleBudgetJarDeleted"
                            IsNew="@(budgetJar.IsNew)" FormattedAmount="@($"Balance: {CurrencyUtil.Formatted(budgetJar.TotalBalance, cultureInfo)}")"
                            HideDelete="@(budgetJar.TotalBalance > 0)"/>
                    }
                }
                    <MudCard Outlined="true" Class="budgetjar-card budgetjar-card-addnew" @onclick="@AddNewClick">
                        <MudCardContent Style="padding-top: 0; text-align: center;">
                            <MudIcon Icon="@Icons.Material.Filled.Add" Class="icon" />
                            <MudText>Add New</MudText>
                        </MudCardContent>
                    </MudCard>
                </div>
            </MudContainer>
            <AppOverlay IsLoading="@isLoading" />
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    [Inject] IMediator Mediator { get; set; }
    [Inject] IMapper Mapper { get; set; }
    [Inject] NavigationManager NavigationManager { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }

    [CascadingParameter]
    public UserDto AuthUser { get; set; } = default;

    private string cultureInfo = DefaultConstants.DefaultCultureInfo;
    private bool isLoading;
    private List<BudgetJarModel> budgetJars = new List<BudgetJarModel>();
    private float totalPercentages;
    private decimal totalBalance;
    private IconDto[] iconSet = Array.Empty<IconDto>();

    protected override async Task OnInitializedAsync()
    {
        cultureInfo = AuthUser.CultureInfo;
        isLoading = true;
        var budgetJarsDto = await Mediator.Send(new GetBudgetJarsByUserId(AuthUser.Id));
        budgetJars = budgetJarsDto.Select(x => new BudgetJarModel(x, false)).ToList();
        totalPercentages = budgetJars.Sum(x => x.Percentage);
        totalBalance = budgetJars.Sum(x => x.TotalBalance);

        iconSet = (await Mediator.Send(new GetIconsQuery())).ToArray();
        isLoading = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        // If there is none, create from default jars
        //if (!budgetJars.Any())
        //{
        //    isLoading = true;
        //    var budgetJarsDto = await Mediator.Send(new CreateBudgetJarsFromDefault(AuthUser.Id));
        //    budgetJars = budgetJarsDto.OrderByDescending(x => x.Percentage).Select(x => new BudgetJarModel(x)).ToList();
        //    totalPercentages = 0;
        //    totalBalance = 0;
        //    isLoading = false;
        //    StateHasChanged();
        //}
    }

    private async Task HandleBudgetJarUpdated(BudgetJarDto jar)
    {
        jar.UserId = AuthUser.Id;
        jar.IsDefault = false;
        var id = await Mediator.Send(new SaveBudgetJarCommand(jar));

        var budgetJar = budgetJars.SingleOrDefault(x => x.Id == id);
        if (budgetJar != null)
        {
            budgetJar.IsNew = false;
            budgetJar.IconId = jar.IconId;
            budgetJar.Icon = jar.Icon;
            budgetJar.Name = jar.Name;
            budgetJar.Percentage = jar.Percentage;
        } else
        {
            budgetJars.Add(new BudgetJarModel(jar, false));
        }

        totalPercentages = budgetJars.Sum(x => x.Percentage);
        totalBalance = budgetJars.Sum(x => x.TotalBalance);
        StateHasChanged();
    }

    private async Task HandleBudgetJarDeleted(Guid id)
    {
        var jar = budgetJars.SingleOrDefault(x => x.Id == id);
        if (!jar.IsNew)
        {
            var result = await Mediator.Send(new DeleteBudgetJarCommand(id, false));
            if (!result)
            {
                Snackbar.Clear();
                Snackbar.Add("Cannot delete the budget jar. Make it is not in used in the income and expense.", MudBlazor.Severity.Error);
                return;
            }    
        }

        budgetJars.Remove(jar);
        totalPercentages = budgetJars.Sum(x => x.Percentage);
        totalBalance = budgetJars.Sum(x => x.TotalBalance);
        StateHasChanged();
    }

    private void AddNewClick()
    {
        var icon = Mapper.Map<IconDto>(DefaultConstants.DefaultIcon);
        budgetJars.Add(new BudgetJarModel()
        {
            IsNew = true,
            Id = Guid.NewGuid(),
            UserId = AuthUser.Id,
            Name = "",
            IsDefault = false,
            TotalBalance = 0,
            Percentage = 0,
            IconId = icon.Id,
            Icon = icon,
        });
    }

    protected class BudgetJarModel : BudgetJarDto
    {
        public bool IsNew { get; set; }

        public BudgetJarModel(){}

        public BudgetJarModel(BudgetJarDto budgetJar, bool isNew)
        {
            IsNew = isNew;
            Id = budgetJar.Id;
            UserId = budgetJar.UserId;
            Name = budgetJar.Name;
            Percentage = budgetJar.Percentage;
            IsDefault = false;
            IconId = budgetJar.IconId;
            Icon = budgetJar.Icon;
            TotalBalance = budgetJar.TotalBalance;
        }
    }
}
