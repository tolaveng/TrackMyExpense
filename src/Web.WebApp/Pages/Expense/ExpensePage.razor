@page "/expenses"
@using AutoMapper
@using Core.Application.Common
@using Core.Application.Mediator.Expenses
@using Core.Application.Mediator.Icons
@using Core.Application.Models
@using Core.Application.Utils
@using MediatR
@using System.Security.Authentication
@using Web.WebApp.Components.Dialogs
@using static Web.WebApp.Pages.Expense.ExpenseFilterSelector
@attribute [Authorize]

<SetPageTitle Value="@($"{DefaultConstants.PageTitle} - Expenses")" />
<MudContainer Class="mt-8" MaxWidth="@MaxWidth.ExtraLarge">
    <Breadcrumbs>
        <BreadcrumbsItem Icon="@Icons.Filled.Paid" Title="Expenses"/>
    </Breadcrumbs>
    <MudCard>
        <MudCardContent>
            <MudTable @ref="table" ServerData="@(new Func<TableState, Task<TableData<ExpenseDto>>>(ServerReload))"
        Dense="true" FixedHeader="true" Hover="true" Breakpoint="Breakpoint.Sm" Striped="true"
        Loading="@loading" LoadingProgressColor="Color.Info"
        T= "ExpenseDto">
            <ToolBarContent>
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="@AddNew">
                    Add Expense
                </MudButton>
                <MudSpacer />
                <ExpenseFilterSelector Filter="@filter" OnFilterChanged="@OnFilterChanged" />
            </ToolBarContent>
            <HeaderContent>
                <MudTh><MudTableSortLabel SortLabel="PaidDate" T="ExpenseDto">Date</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="BudgetJar" T="ExpenseDto">Jar</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="Amount" T="ExpenseDto">Amount</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="Category" T="ExpenseDto">Category</MudTableSortLabel></MudTh>
                <MudTh>Description</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Date">@context.PaidDate.ToString(dateTimeFormat)</MudTd>
                <MudTd DataLabel="Jar">
                    <img src="@context.BudgetJar.Icon.IconUrl" height="24" width="24" class="mr-2" />
                    @context.BudgetJar.Name
                </MudTd>
                <MudTd DataLabel="Amount">@CurrencyUtil.Formatted(context.Amount, cultureInfo)</MudTd>
                <MudTd DataLabel="Category">
                    <img src="@context.Category.Icon.IconUrl" height="24" width="24" class="mr-2" />
                    @context.Category.Name
                </MudTd>
                <MudTd DataLabel="Description" HideSmall="@true">
                    @if(!string.IsNullOrWhiteSpace(context.Description) && context.Description.Length > 64)
                    {
                        @($"{context.Description.Substring(0, 64)}...")
                    } else {
                        @context.Description
                    }
                </MudTd>
                <MudTd DataLabel="Actions">
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" aria-label="edit"
                        Title="Edit" Color="Color.Primary" OnClick="@(() => EditRow(context.Id))" />
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" aria-label="delete"
                        Title="Delete" Color="Color.Error" OnClick="@(() => DeleteRow(context.Id))" />
                </MudTd>
            </RowTemplate>
            <NoRecordsContent>
                <MudText>No record found</MudText>
            </NoRecordsContent>
            <LoadingContent>
                <MudText>Loading...</MudText>
            </LoadingContent>
            <PagerContent>
                <MudTablePager HorizontalAlignment="HorizontalAlignment.Left" HideRowsPerPage="false" HidePageNumber="false"
                InfoFormat="@($"{TotalItems} records")"/>
            </PagerContent>
        </MudTable>
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    [Inject] IMediator Mediator { get; set; }
    [Inject] NavigationManager NavigationManager { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }
    [Inject] IMapper Mapper { get; set; }
    [Inject] IDialogService Dialog { get; set; }

    [CascadingParameter]
    public UserDto AuthUser { get; set; } = default;

    private string timeZoneId = DefaultConstants.DefaultTimeZone;
    private string dateTimeFormat = DefaultConstants.DefaultDateTimeFormat;
    private string cultureInfo = DefaultConstants.DefaultCultureInfo;

    private MudTable<ExpenseDto> table;
    private int TotalItems;
    private bool loading = true;

    private ExpenseFilter filter = new ExpenseFilter();

    protected override void OnInitialized()
    {
        timeZoneId = AuthUser.TimeZone;
        cultureInfo = AuthUser.CultureInfo;
        dateTimeFormat = DateTimeUtil.GetDateTimeFormatFromCultureInfo(AuthUser.CultureInfo);

        base.OnInitialized();
    }

    private async Task<TableData<ExpenseDto>> ServerReload(TableState state)
    {
        if (AuthUser == null)
        {
            throw new AuthenticationException();
        }

        loading = true;
        var pagination = new Pagination(state.Page, state.PageSize, state.SortLabel,
            state.SortDirection == SortDirection.Descending ? Pagination.Descending : Pagination.Ascending);

        var result = await Mediator.Send(new GetExpensesPaged(AuthUser.Id, timeZoneId, pagination, filter));
        TotalItems = result.TotalCount;

        // resovle icons, cannot use include
        var iconIds = result.Data.Select(x => x.BudgetJar.IconId).ToList();
        iconIds.AddRange(result.Data.Select(x => x.Category.IconId));
        var icons = await Mediator.Send(new GetIconsByIds(iconIds));
        var iconDictionary = icons.ToDictionary(x => x.Id);
        foreach(var data in result.Data)
        {
            data.BudgetJar.Icon = iconDictionary.TryGetValue(data.BudgetJar.IconId, out var icon)
            ? icon : new IconDto();

            data.Category.Icon = iconDictionary.TryGetValue(data.Category.IconId, out var aIcon)
            ? aIcon : new IconDto();
        }

        loading = false;
        return new TableData<ExpenseDto>() {TotalItems = result.TotalCount, Items = result.Data};
    }

    private void AddNew()
    {
        NavigationManager.NavigateTo("/expense/new");
    }

    private void EditRow(Guid id)
    {
        NavigationManager.NavigateTo($"/expense/{id}");
    }

    private async Task DeleteRow(Guid id)
    {
        var dialogParams = new DialogParameters() {
            ["Message"] = "Are you sure you want to delete this expense?",
            ["Color"] = Color.Error,
            ["PrimaryButtonText"] = "Delete"
        };
        var dialog = Dialog.Show<ConfirmDialog>("Delete Expense", dialogParams);
        var result = await dialog.Result;
        if (result.Cancelled) return;
        try
        {
            var deleted = await Mediator.Send(new DeleteExpense(id));
            if (deleted)
            {
                await table.ReloadServerData();
                Snackbar.Add("Expense has been deleted successfully.", Severity.Success);
            }
        } catch (Exception)
        {
            Snackbar.Add("Something went wrong. Please try again later", Severity.Error);
        }
    }

    private async Task OnFilterChanged(ExpenseFilter aFilter)
    {
        filter = aFilter;
        await table.ReloadServerData();
    }
}