@using Core.Application.Mediator.BudgetJars
@using Core.Application.Mediator.Categories
@using Core.Application.Mediator.Expenses
@using Core.Application.Models
@using Core.Application.Utils
@using MediatR
<div>
    <MudButton Variant="Variant.Filled" 
        StartIcon="@Icons.Filled.FilterList" Color="Color.Primary" OnClick="@toggleFilter">
        Filter
    </MudButton>
    <MudPopover Open="isShow" Style="min-width: 240px;"
        OverflowBehavior="OverflowBehavior.FlipAlways"
        AnchorOrigin="Origin.BottomRight"
        TransformOrigin="Origin.TopRight"
        Elevation="3"
        Paper="true">
        <MudPaper Outlined="true" Class="px-4 py-8">
            <MudDatePicker Label="Date" @bind-Date="@paidDate" Placeholder="@dateTimeFormat"
                DateFormat="@dateTimeFormat" DisableToolbar="true" Class="mb-3" />

            <MudSelect @bind-Value="@Filter.BudgetJarId" Label="Budget Jar" Variant="Variant.Text" Class="mb-3">
                <MudSelectItem Value="@(Guid.Empty)">Select</MudSelectItem>
                @foreach (var jar in budgetJars)
                {
                    <MudSelectItem Value="@jar.Id">@jar.Name</MudSelectItem>
                }
            </MudSelect>

            <MudSelect @bind-Value="@Filter.ExpenseGroupId" Label="Category" Variant="Variant.Text" Class="mb-3">
                <MudSelectItem Value="@(Guid.Empty)">Select</MudSelectItem>
                @foreach (var group in expenseGroups)
                {
                    <MudSelectItem Value="@group.Id">@group.Name</MudSelectItem>
                }
            </MudSelect>
            <MudGrid>
                <MudItem lg="6">
                    <MudTextField @bind-Value="@Filter.MinAmount" Label="Min Amount" MaxLength="10" Class="mb-3" />
                </MudItem>
                <MudItem lg="6">
                    <MudTextField @bind-Value="@Filter.MaxAmount" Label="Max Amount" MaxLength="10" Class="mb-3" />
                </MudItem>
            </MudGrid>
            <MudTextField @bind-Value="@Filter.Description" Label="Description" Class="mb-3" />
            
            <div class="d-flex flex-row justify-space-between mt-3" >
                <MudButton OnClick="@applyFilter" Class="mr-auto ml-n2" Color="Color.Primary" StartIcon="@Icons.Filled.Check" >Apply</MudButton>
                <MudButton OnClick="@clearFilter" Class="ml-auto mr-n2" Color="Color.Default" StartIcon="@Icons.Filled.Clear">Clear</MudButton>
            </div>
        </MudPaper>
    </MudPopover>
</div>

@code {
    [Inject] IMediator Mediator { get; set; }

    [Parameter]
    public ExpenseFilter Filter { get; set; } = new ExpenseFilter();

    [Parameter]
    public EventCallback<ExpenseFilter> OnFilterChanged { get; set; }


    [CascadingParameter]
    public UserDto AuthUser { get; set; } = default;

    private bool isShow;
    private DateTime? paidDate;
    private string dateTimeFormat = DefaultConstants.DefaultDateTimeFormat;
    private string cultureInfo = DefaultConstants.DefaultCultureInfo;
    private BudgetJarDto[] budgetJars = Array.Empty<BudgetJarDto>();
    private ExpenseGroupDto[] expenseGroups = Array.Empty<ExpenseGroupDto>();

    private void toggleFilter()
    {
        isShow = !isShow;
    }

    private async void applyFilter()
    {
        isShow = false;
        if (paidDate.HasValue)
        {
            Filter.PaidDate = DateTimeUtil.ToUtcDateTime(paidDate.Value.Date, AuthUser.TimeZone);
        }

        if (OnFilterChanged.HasDelegate)
        {
            await OnFilterChanged.InvokeAsync(Filter);
        }
    }

    private async void clearFilter()
    {
        isShow = false;
        Filter = new ExpenseFilter();

        if (OnFilterChanged.HasDelegate)
        {
            await OnFilterChanged.InvokeAsync(Filter);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        cultureInfo = AuthUser.CultureInfo;
        dateTimeFormat = DateTimeUtil.GetDateTimeFormatFromCultureInfo(AuthUser.CultureInfo);

        budgetJars = (await Mediator.Send(new GetBudgetJarsByUserId(AuthUser.Id)))
            .OrderBy(x => x.Name).ToArray();
        
        expenseGroups = (await Mediator.Send(new GetExpenseGroupsQuery(false, AuthUser.Id)))
            .OrderBy(x => x.Name).ToArray();
    }
}