@page "/income/{id}"
@attribute [Authorize]

@using AutoMapper
@using Core.Application.Mediator.BudgetJarTemplates
@using Core.Application.Mediator.BudgetJars
@using Core.Application.Mediator.Icons
@using Core.Application.Mediator.Incomes
@using Core.Application.Models
@using Core.Application.Utils
@using FluentValidation
@using MediatR
@using System.Security.Authentication
@using Web.WebApp.Components
@using Web.WebApp.Pages.BudgetJar

<SetPageTitle Value="@($"{DefaultConstants.PageTitle} - Add Income")" />
<MudContainer Class="mt-8" MaxWidth="@MaxWidth.ExtraLarge">
    <Breadcrumbs>
        <BreadcrumbsItem Icon="@Icons.Filled.AttachMoney" Title="My Incomes" Href="/incomes"/>
        <BreadcrumbsItem Title="Add Income" />
    </Breadcrumbs>
    <MudCard Outlined="true" Class="p-3" Style="position: relative;">
        <MudCardContent>
            <MudContainer MaxWidth="@MaxWidth.Medium">
                <EditForm Model="@incomeInputForm" Context="formContext" OnValidSubmit="@SaveIncome">
                    <DataAnnotationsValidator/>
                    <FluentValidationValidator T="IncomeInputModel" TValidator="IncomeInputValidator"/>
                    <MudGrid>
                    <MudItem xs="12" sm="12">
                        <MudText>Add your income that you want to track between begin and end date period.</MudText>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudDatePicker Label="Begin date" @bind-Date="@incomeInputForm.Begin"
                            For="@(() => incomeInputForm.Begin)" Placeholder="@dateTimeFormat"
                            DateFormat="@dateTimeFormat" DisableToolbar="true" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudDatePicker Label="End date" @bind-Date="@incomeInputForm.End"
                            For="@(() => incomeInputForm.End)" Placeholder="@dateTimeFormat"
                            DateFormat="@dateTimeFormat" DisableToolbar="true"/>
                    </MudItem>
                    <MudItem xs="12" sm="12">
                        <MudTextField Label="Amount" @bind-Value="@incomeInputForm.Amount"
                            For="@(() => incomeInputForm.Amount)" Class="mb-3"
                            Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AttachMoney"
                            Immediate="true" TextChanged="@(x => CalculateBudgetJar(x))"/>
                    </MudItem>
                    <MudItem xs="12" sm="12">
                        <MudTextField Label="Note" Variant="Variant.Outlined" @bind-Value="@incomeInputForm.Note" For="@(() => incomeInputForm.Note)" Lines="3" />
                    </MudItem>
                    </MudGrid>
                    <div class="mt-3">
                        <MudText>Your jars: The income is divided into @(budgetJars.Count) budget jars.</MudText>
                    </div>
                    <div class="budgetjar-cards">
                        @{
                            var totalPercentages = budgetJars.Sum(x => x.Percentage);
                        }
                        @foreach(var budgetJar in budgetJars)
                        {
                        <BudgetJarCard @key="@budgetJar.Id" T="BudgetJarDto" BudgetJar="budgetJar" TotalPercentages="@totalPercentages"
                        IconSet="@iconSet" FormattedAmount="@(CurrencyUtil.Formatted(budgetJar.Amount, cultureInfo))"
                        DeleteDisabled="true" OnUpdated="@HandleBudgetJarUpdate"
                        />
                        
                        }
                    </div>
                    <MudButton Type="button" Variant="Variant.Outlined" Color="@Color.Default" Class="m-3" OnClick="@GoBack">Back</MudButton>
                    <AppButton Type="submit" Text="Save" Color="@Color.Primary" IsLoading="@isSubmitting"
                            IsDisabled="@(!((formContext.IsModified() || isModified) && formContext.Validate()))" Class="m-3" />
                </EditForm>
            </MudContainer>
        </MudCardContent>       
    </MudCard>
</MudContainer>

@code {
    [Inject] IMediator Mediator { get; set; }
    [Inject] NavigationManager NavigationManager { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }
    [Inject] IMapper Mapper { get; set; }

    [CascadingParameter]
    public UserDto AuthUser { get; set; } = default;

    [Parameter]
    public string Id { get; set; }

    private bool isNew;
    private Guid incomeId;
    private string dateTimeFormat = DefaultConstants.DefaultDateTimeFormat;
    private string cultureInfo = DefaultConstants.DefaultCultureInfo;
    private bool isSubmitting;
    private bool isModified;
    private IncomeInputModel incomeInputForm = new IncomeInputModel();
    private List<BudgetJarDto> budgetJars =  new List<BudgetJarDto>();
    private IconDto[] iconSet = Array.Empty<IconDto>();

    protected override async Task OnInitializedAsync()
    {
        if (AuthUser == null)
        {
            throw new AuthenticationException();
        }

        if (string.IsNullOrWhiteSpace(Id))
        {
            throw new InvalidOperationException("Missing Id");
        }

        if (Id.Equals("new", StringComparison.InvariantCultureIgnoreCase))
        {
            isNew = true;
            incomeInputForm = new IncomeInputModel(AuthUser);
            // Get default budget jars
            var budgetJarTemplates = await GetBudgetJarsFromTemplates();
            budgetJars = budgetJarTemplates.Select(BudgetJarDto.FromTemplate).ToList();

        } else if (Guid.TryParse(Id, out incomeId))
        {
            isNew = false;
            var income = await Mediator.Send(new GetIncomeById(AuthUser.Id, incomeId, AuthUser.TimeZone));
            if (income == null)
            {
                throw new InvalidOperationException("Income is not found");
            }
            incomeInputForm = new IncomeInputModel(income);
            budgetJars = await Mediator.Send(new GetBudgetJarsByIncomeId(income.Id));
            budgetJars = budgetJars.OrderByDescending(x => x.Percentage).ToList();
        } else
        {
            throw new InvalidOperationException("Invalid Id");
        }

        cultureInfo = AuthUser.CultureInfo;
        dateTimeFormat = DateTimeUtil.GetDateTimeFormatFromCultureInfo(AuthUser.CultureInfo);
        iconSet = (await Mediator.Send(new GetIconsQuery())).ToArray();

        // if all jars less than 100%, add an other jar
        var totalPercentage = budgetJars.Sum(x => x.Percentage);
        if (totalPercentage < 100)
        {
            var lastPercentage = Math.Round(100 - totalPercentage, 2, MidpointRounding.AwayFromZero);
            var icon = Mapper.Map<IconDto>(DefaultConstants.DefaultIcon);
            budgetJars.Add(new BudgetJarDto()
            {
                Id = Guid.NewGuid(),
                UserId = AuthUser.Id,
                Name = "Others",
                Amount = 0,
                Percentage = (float)lastPercentage,
                IconId = icon.Id,
                Icon = icon,
            });
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("incomes");
    }

    private async Task<List<BudgetJarTemplateDto>> GetBudgetJarsFromTemplates()
    {
        var budgetJarTemplates = await Mediator.Send(new GetBudgetJarTemplatesByUserId(AuthUser.Id));
        if(!budgetJarTemplates.Any())
        {
            budgetJarTemplates = await Mediator.Send(new GetBudgetJarTemplatesQuery(true, null));
        }
        budgetJarTemplates = budgetJarTemplates.OrderByDescending(x => x.Percentage).ToList();
        return budgetJarTemplates;
    }


    private async Task SaveIncome()
    {
        if (incomeInputForm.Amount < 1) return;
        // All budget jars must be 100%
        if (budgetJars.Sum(x => x.Percentage) < 100)
        { 
            Snackbar.Clear();
            Snackbar.Add("Sum of all budget jars must be 100%", MudBlazor.Severity.Error);
            return;
        }

        isSubmitting = true;
        var income = incomeInputForm.ToIncomeDto(AuthUser.TimeZone);
        var result = await Mediator.Send(new SaveIncomeRequest(income, budgetJars.ToArray()));
        if (result == Guid.Empty)
        {
            Snackbar.Clear();
            Snackbar.Add("Something went wrong. Cannot save the income. Please try again later.");
            isSubmitting = false;
            return;
        }
        NavigationManager.NavigateTo("/incomes");
    }

    private void CalculateBudgetJar(string amountText)
    {
        if (!decimal.TryParse(amountText, out var amount)) return;
        if (!budgetJars.Any()) return;

        foreach(var budgetJar in budgetJars)
        {
            budgetJar.Amount = Math.Round(amount * decimal.Divide((decimal)budgetJar.Percentage, 100), 2, MidpointRounding.AwayFromZero);
        }
        //budgetJars.Last().Amount = amount - budgetJars.Take(budgetJars.Count - 1).Sum(x => x.Amount);
    }

    private void HandleBudgetJarUpdate(BudgetJarDto budgetJar)
    {
        var jar = budgetJars.Single(x => x.Id == budgetJar.Id);
        jar.Percentage = budgetJar.Percentage;
        jar.Name = budgetJar.Name;
        jar.Icon = budgetJar.Icon;
        jar.IconId = budgetJar.IconId;
        CalculateBudgetJar(incomeInputForm.Amount.ToString());
        isModified = true;
    }

    public class IncomeInputModel
    {
        public Guid Id { get; set; } = Guid.Empty;
        public Guid UserId { get; set; }
        public decimal Amount { get; set; }
        public string Note { get; set; }
        public DateTime? Begin { get; set; }
        public DateTime? End { get; set; }

        public IncomeInputModel(){}

        public IncomeInputModel(UserDto user)
        {
            UserId = user.Id;
            Amount = 0;
            var now = DateTimeUtil.TimeZoneNow(user.TimeZone);
            Begin = new DateTime(now.Year, now.Month, 1);
            End = new DateTime(now.Year, now.Month, DateTime.DaysInMonth(now.Year, now.Month));
        }

        public IncomeInputModel(IncomeDto income)
        {
            Id = income.Id;
            UserId = income.UserId;
            Amount = income.Amount;
            Note = income.Note;
            Begin = income.Begin;
            End = income.End;
        }

        public IncomeDto ToIncomeDto(string timeZone)
        {
            return new IncomeDto()
            {
                Id = Id,
                UserId = UserId,
                Amount = Amount,
                Note = Note,
                Begin = DateTimeUtil.ToUtcDateTime(Begin.Value, timeZone),
                End = DateTimeUtil.ToUtcDateTime(End.Value, timeZone)
            };
        }
    }
    public class IncomeInputValidator : AbstractValidator<IncomeInputModel>
    {
        public IncomeInputValidator()
        {
            RuleFor(x => x.Amount).NotEmpty().WithMessage("Amount is required")
            //.InclusiveBetween(1, 1000000)
            .GreaterThanOrEqualTo(1).WithMessage("Amount must be greater than or equal to 1")
            .LessThan(1000000).WithMessage("Amount must be less than 1000000");

            RuleFor(x => x.Begin).NotEmpty().WithMessage("Begin date is required")
            .LessThan(x => x.End).When(x => x.End != null).WithMessage("Begin date must be before the end date");

            RuleFor(x => x.End).NotEmpty().WithMessage("End date is required")
            .GreaterThan(x => x.Begin).When(x => x.Begin != null).WithMessage("End date must be after the start date");
        }
    }
}
