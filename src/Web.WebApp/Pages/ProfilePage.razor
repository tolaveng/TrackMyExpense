@page "/profile"
@attribute [Authorize]
@using Core.Application.Mediator.Users
@using Core.Application.Models
@using Core.Application.Providers.IProviders
@using Core.Application.Utils
@using FluentValidation
@using MediatR
@using Web.WebApp.Components
@using Web.WebApp.Components.Dialogs

<SetPageTitle Value=@($"{DefaultConstants.PageTitle} - Profile") />

<MudContainer Class="mt-8" MaxWidth="@MaxWidth.ExtraLarge">
    <Breadcrumbs>
        <BreadcrumbsItem Title="Profile"  Icon="@Icons.Filled.ManageAccounts" />
    </Breadcrumbs>
    
    <MudCard Outlined="true" Class="p-3" Style="position: relative;">
        <MudCardContent>
            <MudContainer MaxWidth="@MaxWidth.Medium">
            <EditForm Model="@profileInputForm" Context="formContext" OnValidSubmit="@UpdateProfileDetails">
                <DataAnnotationsValidator/>
                <FluentValidationValidator T="ProfileInputModel" TValidator="ProfileInputValidator" />
                <MudGrid>
                    <MudItem xs="12" sm="3">
                        <span style="font-weight: bold">Account Setting</span>
                    </MudItem>
                    <MudHidden Breakpoint="Breakpoint.Xs">
                        <MudItem xs="12" sm="9"><!-- empty --></MudItem>
                    </MudHidden>

                    <!-- -->
                    <MudItem xs="12" sm="3">
                        <div style="text-align: center">
                            @if (string.IsNullOrWhiteSpace(imageThumbnailUrl))
                            {
                                <a class="profile-image" href="" @onclick="@UploadProfileImage" @onclick:preventDefault title="Edit profile image">
                                    <span class="text-edit">Edit</span>
                                    <MudIcon Icon="@Icons.Filled.AccountCircle" />
                                </a>
                            } else
                            {
                                <a class="profile-image" href="" @onclick="@UploadProfileImage" @onclick:preventDefault title="Edit profile image">
                                    <span class="text-edit">Edit</span>
                                    <img src ="@imageThumbnailUrl" />
                                </a>
                            }
                            </div>
                    </MudItem>
                    <MudItem xs="12" sm="9">
                        <MudTextField Label="Full Name" @bind-Value="@profileInputForm.FullName" Immediate="true" For="@(() => profileInputForm.FullName)" Class="mb-3" />
                        <MudTextField Label="Email" @bind-Value="@profileInputForm.Email" Immediate="true" For="@(() => profileInputForm.Email)" Class="mb-3" />
                        <MudTextField Label="Phone Number" @bind-Value="@profileInputForm.PhoneNumber" Immediate="true" For="@(() => profileInputForm.PhoneNumber)" Class="mb-3" />
                        <CurrencySelector Label="Currency" @bind-Value="@profileInputForm.Currency" For="@(() => profileInputForm.Currency)" Class="mb-3" />
                        <TimeZoneSelector Label="Time Zone" @bind-Value="@profileInputForm.TimeZone" For="@(() => profileInputForm.TimeZone)" Class="mb-3" />
                        <CultureSelector Label="Date Time Format (1 April 2000)" @bind-Value="@profileInputForm.CultureInfo" For="@(() => profileInputForm.CultureInfo)" DateTimeSample="@dateTimeSample" Class="mb-3" />
                        <AppButton Type="submit" Text="Save Change" Color="@Color.Primary" IsLoading="@isSubmitting"
                            IsDisabled="@(!formContext.IsModified() || !formContext.Validate())" />
                    </MudItem>
                    <MudItem xs="12" sm="12"></MudItem>
                </MudGrid>
            </EditForm>

            <EditForm Model="@passwordInputForm" Context="formContext" OnValidSubmit="@UpdatePassword">
                <DataAnnotationsValidator/>
                <FluentValidationValidator T="PasswordInputModel" TValidator="PasswordInputValidator" />
                <MudGrid>
                    <MudItem xs="12" sm="3">
                        <span style="font-weight: bold">Update Password</span>
                    </MudItem>
                    <MudItem xs="12" sm="9">
                        <MudTextField Label="Current Password" @bind-Value="@passwordInputForm.CurrentPassword" For="@(() => passwordInputForm.CurrentPassword)" InputType="InputType.Password" Class="mb-3"/>
                        <MudTextField Label="New Password" @bind-Value="@passwordInputForm.NewPassword" For="@(() => passwordInputForm.NewPassword)" InputType="InputType.Password" Disabled=@(string.IsNullOrWhiteSpace(@passwordInputForm.CurrentPassword)) Class="mb-3"/>
                        <MudTextField Label="Confirm Password" @bind-Value="@passwordInputForm.ConfirmPassword" For="@(() => passwordInputForm.ConfirmPassword)" InputType="InputType.Password"  Disabled=@(string.IsNullOrWhiteSpace(@passwordInputForm.CurrentPassword)) Immediate="true" Class="mb-3"/>
                        <AppButton Type="submit" Text="Update Password" Color="Color.Primary"  IsLoading="@isSubmitting"
                            IsDisabled="@(!formContext.IsModified() || !formContext.Validate())" />
                    </MudItem>
                    <MudItem xs="12" sm="12"></MudItem>
                </MudGrid>
            </EditForm>

            <MudGrid>
                    <!-- -->
                    <MudItem xs="12" sm="3">
                        <span style="font-weight: bold">Subscription</span>
                    </MudItem>
                    <MudItem xs="12" sm="9">
                        @if(subscription != null)
                        {
                            if (subscription.SubscriptionType == Core.Domain.Enums.SubscriptionType.Free)
                            {
                                <MudText>Free membership |
                                    <MudLink Href="/subscription">Try Premium Account 3 months Free</MudLink>
                                </MudText>
                            }
                            else
                            {
                                <MudText>
                                    @subscription.SubscriptionType.ToString()
                                    @(subscription.End.HasValue
                                    ? $", Valid to: {subscription.End.Value.ToString("dd/MM/yyyy")}"
                                    : "")
                                </MudText>
                            }
                        }
                    </MudItem>
            </MudGrid>
            </MudContainer>
        </MudCardContent>
        <AppOverlay IsLoading="@isLoading" />
    </MudCard>
</MudContainer>

@code {
    [Inject] IMediator Mediator { get; set; }
    [Inject] IDialogService Dialog { get; set; }
    [Inject] IJSRuntime JSRuntime { get; set; }
    [Inject] IFileDirectoryProvider FileDirectoryProvider { get; set; }
    [Inject] NavigationManager NavigationManager { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }

    [CascadingParameter]
    public UserDto AuthUser { get; set; } = default;

    private DateTime dateTimeSample = new DateTime(2000, 4, 1, 13, 00, 00, DateTimeKind.Unspecified);
    private ProfileInputModel profileInputForm = new ProfileInputModel();
    private PasswordInputModel passwordInputForm = new PasswordInputModel();

    private bool isLoading = true;
    private bool isSubmitting = false;
    private string imageName;
    private string imageUrl;
    private string imageThumbnailUrl;
    private SubscriptionDto subscription;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (AuthUser == null) return;
        profileInputForm = new ProfileInputModel(AuthUser);

        if (!string.IsNullOrEmpty(AuthUser.ProfileImage))
        {
            imageName = AuthUser.ProfileImage;

            var baseUri = NavigationManager.BaseUri;
            imageUrl = FileDirectoryProvider.ResolveProfileImageUrl(AuthUser.ProfileImage, baseUri);
            imageThumbnailUrl = FileDirectoryProvider.ResolveProfileImageThumbnailUrl(AuthUser.ProfileImage, baseUri);
        }

        if (AuthUser.Subscriptions != null)
        {
            subscription = AuthUser.Subscriptions.OrderBy(x => x.Begin).LastOrDefault();
        }

        isLoading = false;
    }

    public async Task UpdateProfileDetails()
    {
        if (string.IsNullOrWhiteSpace(profileInputForm.Email))
        {
            Snackbar.Add("Email is required", MudBlazor.Severity.Error);
            return;
        }


        if (!profileInputForm.Email.Trim().Equals(AuthUser.Email, StringComparison.OrdinalIgnoreCase))
        {
            var newEmail = profileInputForm.Email.Trim().ToLower();
            var parameters = new DialogParameters
                {
                    ["UserId"] = AuthUser.Id,
                    ["Message"] = $"Warning ! You are about to change your login email to <b>{newEmail}</b>" +
                                    "<br/>If you wish to continue, please type your password below.",
                    ["PrimaryButtonText"] = "Change",
                    ["Color"] = Color.Error,
                };
            var options = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = false };
            var dialog = Dialog.Show<ConfirmWithPasswordDialog>("Email Changed !", parameters, options);
            var passwordConfirmed = await dialog.Result;
            if (passwordConfirmed.Cancelled)
            {
                return;
            }
            if (!(bool)passwordConfirmed.Data)
            {
                Snackbar.Add("Incorrect Password!", MudBlazor.Severity.Error);
                return;
            }

            // set login username to the new email
            profileInputForm.Username = newEmail;
            profileInputForm.Email = newEmail;
        }

        isSubmitting = true;
        var result = await Mediator.Send(new UpdateUserProfileRequest(profileInputForm.ToUserDto()));
        if (result.Succeeded)
        {
            Snackbar.Clear();
            Snackbar.Add("Profile has been saved successfully", MudBlazor.Severity.Success);
            isSubmitting = false;
            return;
        }
        Snackbar.Add("Something went wrong, cannot save profile. Please try again later.", MudBlazor.Severity.Error);
        isSubmitting = false;
    }

    public async Task UpdatePassword()
    {
        if (string.IsNullOrWhiteSpace(passwordInputForm.CurrentPassword) ||
        string.IsNullOrWhiteSpace(passwordInputForm.NewPassword))
        {
            throw new ArgumentNullException("Invalid Passwords");
        }

        isSubmitting = true;
        var isUpdated = await Mediator.Send(new UpdateUserPasswordRequest(AuthUser.Id,
            passwordInputForm.CurrentPassword, passwordInputForm.NewPassword));

        if (isUpdated)
        {
            passwordInputForm = new PasswordInputModel();
            Snackbar.Clear();
            Snackbar.Add("Password has been updated successfully", MudBlazor.Severity.Success);
            isSubmitting = false;
            return;
        }

        Snackbar.Add("We're sorry, password reset fails. Please make sure your current password is correct.", MudBlazor.Severity.Error);
        isSubmitting = false;
    }

    private async Task UploadProfileImage()
    {
        var parameters = new DialogParameters {
            ["UserId"] = AuthUser.Id,
            ["ImageName"] = imageName,
            ["ImageUrl"] = imageUrl,
        };
        var options = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = Dialog.Show<ProfileImageDialog>("Upload Profile Image", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            if (result.Data is string response)
            {
                if (response == "deleted")
                {
                    imageName = "";
                } else
                {
                    imageName = response;                    
                }

                // Save to db
                await Mediator.Send(new UpdateProfileImageRequest(AuthUser.Id, imageName));

                // preview
                profileInputForm.ProfileImage = imageName;
                var baseUri = NavigationManager.BaseUri;
                imageUrl = FileDirectoryProvider.ResolveProfileImageUrl(imageName, baseUri);
                imageThumbnailUrl = FileDirectoryProvider.ResolveProfileImageThumbnailUrl(imageName, baseUri);
            }
        }
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("loadJSScript", @"/Croppie/croppie.min.js");
            await JSRuntime.InvokeVoidAsync("loadJSScript", @"/js/profile-image-croppie.js");
        }
    }

    public class ProfileInputModel
    {
        public Guid Id { get; set; }
        public string Username { get; set; }
        public string FullName { get; set; } 
        public string Email { get; set; }
        public bool EmailConfirmed { get; set; }
        public string PhoneNumber { get; set; }
        public bool PhoneNumberConfirmed { get; set; }
        public string Currency { get; set; }
        public string TimeZone { get; set; }
        public string CultureInfo { get; set; }
        public string ProfileImage { get; set; }

        public ProfileInputModel(){}

        public ProfileInputModel(UserDto user)
        {
            Id = user.Id;
            Username = user.Username;
            FullName = user.FullName;
            Email = user.Email;
            PhoneNumber = user.PhoneNumber;
            Currency = user.Currency;
            TimeZone = user.TimeZone;
            ProfileImage = user.ProfileImage;
            CultureInfo = user.CultureInfo;
        }

        public UserDto ToUserDto()
        {
            return new UserDto()
                {
                    Id = Id,
                    Username = Username,
                    FullName = FullName,
                    Email = Email,
                    PhoneNumber = PhoneNumber,
                    Currency = Currency,
                    TimeZone = TimeZone,
                    ProfileImage = ProfileImage,
                    CultureInfo = CultureInfo,
                };
        }
    }

    public class PasswordInputModel
    {
        public Guid Id { get; set; }
        public string Username { get; set; }
        public string CurrentPassword { get; set; }
        public string NewPassword { get; set; }
        public string ConfirmPassword { get; set; }
        
        public PasswordInputModel(){}

        public UserDto ToUserDto()
        {
            return new UserDto()
                {
                    Id = Id,
                    Username = Username,
                    Password = NewPassword
                };
        }
    }

    public class ProfileInputValidator : AbstractValidator<ProfileInputModel>
    {
        public ProfileInputValidator()
        {
            RuleFor(x => x.FullName).NotEmpty().WithMessage("Full Name is required");
            RuleFor(x => x.Email).NotEmpty().WithMessage("Email is required")
            .EmailAddress().WithMessage("Invalid email address");
        }
    }

    public class PasswordInputValidator : AbstractValidator<PasswordInputModel>
    {
        public PasswordInputValidator()
        {
            RuleFor(x => x.CurrentPassword)
            .NotEmpty().WithMessage("Current Password is required");

            RuleFor(x => x.NewPassword)
            .NotEmpty().WithMessage("New Password is required")
            .MinimumLength(8).WithMessage("Password is too short")
            .MaximumLength(24).WithMessage("Password is too long")
            //.Matches(@"[A-Z]+").WithMessage("Password must contain at least one uppercase letter.")
            .Matches(@"[a-z]+").WithMessage("Password must contain at least one lowercase letter.")
            //.Matches(@"[0-9]+").WithMessage("Password must contain at least one number.")
            //.Matches(@"[\!\?\@\*\.]+").WithMessage("Password must contain at least one (!?@ *.).")
            ;

            RuleFor(x => x.ConfirmPassword)
            .NotEmpty().WithMessage("Confirm Password is required")
            .When(x => !string.IsNullOrWhiteSpace(x.NewPassword))
            .WithMessage("Confirm Password is required")
            .Equal(x => x.NewPassword)
            .WithMessage("Confirm Password is not match the New Password");
        }
    }
}
