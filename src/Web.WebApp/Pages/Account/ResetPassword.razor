@page "/account/resetpassword"
@attribute [AllowAnonymous]
@layout BlankLayout
@using Core.Application.Services.IServices
@using System.ComponentModel.DataAnnotations

@inject IUserService UserService;
@inject IJSRuntime JSRuntime;
@inject NavigationManager NavigationManager;

<section class="d-flex justify-content-center">
    <div class="col-md-5 mb-5 card">
        <div class="card-header">
            <h4>Reset Password</h4>
        </div>
        <div class="card-body">
            @if (IsSubmitted)
            {
                @if (!string.IsNullOrWhiteSpace(SuccessMessage))
                {
                    <div class="alert alert-success">
                        <span class="oi oi-info"></span> &nbsp; @((MarkupString)SuccessMessage)
                    </div>
                }

                @if (!string.IsNullOrWhiteSpace(FailureMessage))
                {
                    <div class="alert alert-danger">
                        <span class="oi oi-warning"></span> &nbsp; @FailureMessage
                    </div>
                    <div class="fs-small">Make sure your reset link is not expired.
                        If you experience any issue, please re-generate the reset password <a href="/account/forgotpassword">link</a> again.
                    </div>
                }
            } else
            {
                <EditForm Model="@Input" OnValidSubmit="@SetPassword" class="form-floating">
                    <DataAnnotationsValidator/>
                    <div class="has-float-label mb-3">
                        <InputText type="password" @bind-Value="@Input.Password" id="inputPassword" class="form-control" placeholder="New Password" autocomplete="off" spellcheck="false"/>
                        <label for="inputPassword">New Password</label>
                        <ValidationMessage For="@(() => Input.Password)"/>
                    </div>
                    <div class="has-float-label mb-3">
                        <InputText type="password" @bind-Value="@Input.ConfirmPassword" id="inputConfirmPassword" class="form-control" placeholder="Confirm Password" autocomplete="off" spellcheck="false"/>
                        <label for="inputConfirmPassword">Confirm Password</label>
                        <ValidationMessage For="@(() => Input.ConfirmPassword)"/>
                    </div>
                    <div class="mb-3">
                        <button type="submit" disabled="@IsSubmitting" class="w-100 btn btn-primary">
                            <span class="spinner-border spinner-border-sm" hidden="@(!IsSubmitting)" role="status" aria-hidden="true"></span>
                            <span>Set Password</span>
                        </button>
                    </div>
                </EditForm>

                @if (!string.IsNullOrWhiteSpace(FailureMessage))
                {
                    <div class="alert alert-danger">
                        <span class="oi oi-warning"></span> &nbsp; @FailureMessage
                    </div>
                    <div class="fs-small">Make sure your reset link is not expired.
                        If you experience any issue, please re-generate the reset password <a href="/account/forgotpassword">link</a> again.
                    </div>
                }
            }
        </div>
    </div>
</section>

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "uid")]
    public string Uid { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "token")]
    public string Token { get; set; }

    public InputModel Input { get; set; } = new InputModel();
    public bool IsSubmitting { get; set; }
    public bool IsSubmitted { get; set; }
    public string SuccessMessage { get; set; }
    public string FailureMessage { get; set; }

    public async Task SetPassword()
    {
        if (Input == null
            || string.IsNullOrWhiteSpace(Input.Password)
            || string.IsNullOrWhiteSpace(Input.ConfirmPassword)
            || !Input.Password.Equals(Input.ConfirmPassword))
        {
            return;
        }

        IsSubmitting = true;
        SuccessMessage = string.Empty;
        FailureMessage = string.Empty;

        if (string.IsNullOrWhiteSpace(Uid) || string.IsNullOrWhiteSpace(Token)) return;

        if (Guid.TryParse(Uid, out var userId))
        {
            var IsReset = await UserService.ResetPasswordAsync(userId, Token, Input.Password);
            if (IsReset)
            {
                SuccessMessage = @"Thank you. Your password has been reset successfully. 
                    <a href='/account/login'>Click here to login</a>.
                    You are redirect to log in page shortly.";
                IsSubmitted = true;
                StateHasChanged();
                var loginPage = $"{NavigationManager.BaseUri}account/login";
                await JSRuntime.InvokeVoidAsync("redirectToPage", loginPage, 10);
            } else
            {
                FailureMessage = "Something went wrong. Please try again later";
                IsSubmitted = false;
                StateHasChanged();
            }
        }
        IsSubmitting = false;
    }

    public class InputModel
    {
        [Required(ErrorMessage = "Password is required")]
        [MinLength(8, ErrorMessage = "Password must be at least 6 characters")]
        [StringLength(32, ErrorMessage = "Password too long (32 character limit)")]
        public string Password { get; set; }

        [Required(ErrorMessage = "Confirm Password is required")]
        [MinLength(8, ErrorMessage = "Confirm Password must be at least 6 characters")]
        [StringLength(32, ErrorMessage = "Confirm Password too long (32 character limit)")]
        [CompareProperty("Password", ErrorMessage = "Confirm Password doesn't match the Password")]
        public string ConfirmPassword { get; set; }
    }

}
