@page "/account/forgotpassword"
@attribute [AllowAnonymous]
@layout BlankLayout
@using System.ComponentModel.DataAnnotations
@using Core.Application.Services.IServices
@using Core.Application.Settings
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Hosting
@using System.Web
@using Microsoft.Extensions.Options
@using Web.WebApp.Components

@inject IUserService UserService;
@inject NavigationManager Navigation;
@inject IWebHostEnvironment HostEnvironment;
@inject IEmailService EmailService;

@inject IOptions<ReCaptchaSetting> ReCaptchaSetting

<section class="d-flex justify-content-center">
    <div class="col-md-5 mb-5 card">
        <div class="card-header">
            <h4>Forgot Password</h4>
        </div>
        <div class="card-body">
            <div class="mb-3">Enter email address to receive a password reset link.</div>
            <EditForm Model="@Input" OnValidSubmit="@GenerateResetPasswordEmail">
                <DataAnnotationsValidator/>
                <div>
                    <div class="mb-2">
                        <InputText id="inputEmail" class="form-control" @bind-Value="@Input.Email" placeholder="Email" autocomplete="off" spellcheck="false"/>
                        <ValidationMessage For="@(() => Input.Email)"/>
                    </div>
                    <div class="mb-2">
                        <GoogleRecaptcha @ref="googleRecaptcha" SiteKey=@ReCaptchaSetting.Value.SiteKey SecretKey=@ReCaptchaSetting.Value.SecretKey OnCaptchaChanged="@OnCaptchaChanged" />
                    </div>
                    <div class="mb-2">
                        <button type="submit" disabled="@SubmitDisabled" class="btn btn-primary">
                            <span class="spinner-border spinner-border-sm" hidden="@(!IsSubmitting)" role="status" aria-hidden="true"></span>
                            <span>Get password reset link</span>
                        </button>
                    </div>
                </div>

                @if (!string.IsNullOrWhiteSpace(InfoMessage))
                {
                    <div class="alert alert-info">
                    <span class="oi oi-info"></span> &nbsp;
                    @((MarkupString)InfoMessage)
                    </div>
                } else
                {
                    <div><br /></div>
                }
            </EditForm>
        </div>
    </div>
</section>
@* Debug only: print email confirmation link *@
@if (!string.IsNullOrWhiteSpace(EmailConfirmLink) && HostEnvironment.IsDevelopment())
{
    <textarea>@EmailConfirmLink</textarea>
}

@code {
    public EmailInput Input { get; set; } = new EmailInput();
    public bool IsSubmitting { get; set; }
    public bool SubmitDisabled { get; set; } = true;
    public string InfoMessage { get; set; }
    public string EmailConfirmLink { get; set; }

    GoogleRecaptcha googleRecaptcha;

    public void OnCaptchaChanged(bool isChecked)
    {
        SubmitDisabled = !isChecked;
        StateHasChanged();
    }

    public async Task GenerateResetPasswordEmail()
    {
        IsSubmitting = true;
        SubmitDisabled = true;

        var isValidCaptcha = await googleRecaptcha.ValidateCaptchaAsync();
        if (!isValidCaptcha)
        {
            IsSubmitting = false;
            SubmitDisabled = true;
            return;
        }

        InfoMessage = "If your email is registered. Please check your inbox or spam folder, and click on the reset password link. Thank you.";

        var existUser = await UserService.GetUserByEmailAsync(Input.Email);
        if (existUser == null)
        {   // DOT NOT TELL the email is invalid
            IsSubmitting = false;
            SubmitDisabled = true;
            return;
        }

        if (!UserService.IsEmailConfirmed(existUser.Id))
        {
            IsSubmitting = false;
            SubmitDisabled = true;
            return;
        }

        var token = await UserService.GeneratePasswordResetTokenAsync(existUser.Id);
        EmailConfirmLink = $"{Navigation.BaseUri}account/resetpassword?uid={existUser.Id}&token={HttpUtility.UrlEncode(token)}";
        var result = EmailService.SendPasswordReset(Input.Email, existUser.FullName, EmailConfirmLink);
        if (!result)
        {
            InfoMessage = "Sorry, something went wrong. Please try again later.";
        }
        IsSubmitting = false;
        SubmitDisabled = true;
    }

    public class EmailInput
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress]
        [MinLength(6, ErrorMessage = "Email must be at least 6 characters")]
        [StringLength(32, ErrorMessage = "Email too long (32 character limit)")]
        public string Email { get; set; }
    }
}
