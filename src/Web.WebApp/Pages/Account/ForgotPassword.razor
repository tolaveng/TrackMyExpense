@page "/account/forgotpassword"
@attribute [AllowAnonymous]
@layout EmptyLayout
@using System.ComponentModel.DataAnnotations
@using Core.Application.Services.IServices
@using Core.Application.Settings
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Hosting
@using System.Web
@using Microsoft.Extensions.Logging
@using Microsoft.Extensions.Options
@using Web.WebApp.Components

@inject IUserService UserService;
@inject NavigationManager Navigation;
@inject IWebHostEnvironment HostEnvironment;
@inject IEmailService EmailService;
@inject ILogger<ForgotPassword> Logger;

@inject IOptions<ReCaptchaSetting> ReCaptchaSetting

<MudContainer Class="mt-16" MaxWidth="MaxWidth.Small">
    <MudCard Outlined="true" Elevation="1" Class="rounded-lg p-3">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h5">Reset Password</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            @if (IsSubmitted) {
                @if (!string.IsNullOrWhiteSpace(InfoMessage))
                {
                    <MudAlert Severity="Severity.Info">@((MarkupString)InfoMessage)</MudAlert>
                }
            } else {
                <div class="mb-3">Enter email address to receive a password reset link.</div>
                <EditForm Model="@Input" OnValidSubmit="@GenerateResetPasswordEmail">
                    <DataAnnotationsValidator/>
                    <MudTextField Label="Email" @bind-Value="@Input.Email" For="@(() => Input.Email)" />
                    <div class="my-3">
                        <GoogleRecaptcha @ref="googleRecaptcha" SiteKey=@ReCaptchaSetting.Value.SiteKey SecretKey=@ReCaptchaSetting.Value.SecretKey OnCaptchaChanged="@OnCaptchaChanged" />
                    </div>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Disabled="@SubmitDisabled">
                        <span class="spinner-border spinner-border-sm" hidden="@(!IsSubmitting)" role="status" aria-hidden="true"></span>
                        <span>Get reset password link</span>
                    </MudButton>
                    
                    @if (!string.IsNullOrWhiteSpace(InfoMessage))
                    {
                        <MudAlert Severity="Severity.Info">@((MarkupString)InfoMessage)</MudAlert>
                    }
                </EditForm>
            }
        </MudCardContent>
    </MudCard>
</MudContainer>


@code {
    public EmailInput Input { get; set; } = new EmailInput();
    public bool IsSubmitting { get; set; }
    public bool IsSubmitted { get; set; }
    public bool SubmitDisabled { get; set; } = true;
    public string InfoMessage { get; set; }
    public string EmailConfirmLink { get; set; }

    GoogleRecaptcha googleRecaptcha;

    public void OnCaptchaChanged(bool isChecked)
    {
        SubmitDisabled = !isChecked;
        StateHasChanged();
    }

    public async Task GenerateResetPasswordEmail()
    {
        IsSubmitting = true;
        SubmitDisabled = true;

        var isValidCaptcha = await googleRecaptcha.ValidateCaptchaAsync();
        if (!isValidCaptcha)
        {
            IsSubmitting = false;
            SubmitDisabled = true;
            return;
        }

        InfoMessage = @"Thank you. We sent the reset password link to your email.<br/>
                    If your email is registered. Please check your inbox or spam folder, and click on the reset password link.";
        IsSubmitted = true;

        var existUser = await UserService.GetUserByEmailAsync(Input.Email);
        if (existUser == null)
        {   // DOT NOT TELL the email is invalid
            return;
        }

        if (!UserService.IsEmailConfirmed(existUser.Id))
        {
            return;
        }

        var token = await UserService.GeneratePasswordResetTokenAsync(existUser.Id);
        EmailConfirmLink = $"{Navigation.BaseUri}account/resetpassword?uid={existUser.Id}&token={HttpUtility.UrlEncode(token)}";
        var result = EmailService.SendPasswordReset(Input.Email, existUser.FullName, EmailConfirmLink);
        if (!result)
        {
            InfoMessage = "Sorry, something went wrong. Please try again later.";
        }

         // Debug only: print email confirmation link
        if (HostEnvironment.IsDevelopment())
        {
            Logger.LogDebug(EmailConfirmLink);
        }
    }

    public class EmailInput
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress]
        [MinLength(6, ErrorMessage = "Email must be at least 6 characters")]
        [StringLength(32, ErrorMessage = "Email too long (32 character limit)")]
        public string Email { get; set; }
    }
}
