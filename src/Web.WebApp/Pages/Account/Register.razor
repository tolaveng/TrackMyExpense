@page "/account/register"
@attribute [AllowAnonymous]
@layout EmptyLayout

@using Core.Application.Services.IServices
@using Microsoft.AspNetCore.Components
@using Core.Application.Models
@using System.ComponentModel.DataAnnotations
@using System.Web
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Hosting

@inject IUserService UserService;
@inject NavigationManager Navigation;
@inject IWebHostEnvironment HostEnvironment;
@inject IEmailService EmailService;

<MudContainer Class="mt-16" MaxWidth="MaxWidth.Small">
    <MudCard Outlined="true" Elevation="1" Class="rounded-lg p-3">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h5">Create a new account</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <EditForm Model="@Input" OnValidSubmit="@RegisterUser">
                <DataAnnotationsValidator/>
                <MudTextField Label="Full Name" @bind-Value="@Input.FullName" For="@(() => Input.FullName)" Class="mb-3" />
                <MudTextField Label="Email" @bind-Value="@Input.Email" For="@(() => Input.Email)" Class="mb-3" />
                <MudTextField Label="Password" @bind-Value="@Input.Password" For="@(() => Input.Password)" InputType="InputType.Password" Class="mb-3"/>
                <MudTextField Label="Confirm Password" @bind-Value="@Input.ConfirmPassword" For="@(() => Input.ConfirmPassword)" InputType="InputType.Password"  Class="mb-3"/>
                
                <div class="mb-3">
                    By creating an account, you agree to our <a href="#">Terms of Service</a> and <a href="#">Privacy Policy</a>.
                </div>

                <div class="mb-3">
                    @if (!string.IsNullOrWhiteSpace(ErrorMessage))
                    {
                     <div class="alert alert-danger">
                        <span class="oi oi-warning"></span>
                        @((MarkupString)ErrorMessage)
                        </div>
                    }
                </div>
                <div class="mb-3 row g-3">
                    <div class="col-auto">
                        <MudButton ButtonType="ButtonType.Submit" Disabled="@IsSubmitting" Variant="Variant.Filled" Color="Color.Primary" >
                            <span class="spinner-border spinner-border-sm" hidden="@(!IsSubmitting)" role="status" aria-hidden="true"></span>
                            <span> Create Account</span>
                        </MudButton>
                    </div>
                    <div class="col-auto col-form-label">
                        Already have an account? <a href="/account/login">Log In</a>
                    </div>
                </div>
            </EditForm>
        </MudCardContent>
    </MudCard>
</MudContainer>

@* Debug only: print email confirmation link *@
@if (!string.IsNullOrWhiteSpace(EmailConfirmLink) && HostEnvironment.IsDevelopment())
{
    <textarea>@EmailConfirmLink</textarea>
}


@code {
    public bool IsSubmitting { get; set; }
    public RegisterInput Input { get; set; } = new RegisterInput();
    public string ErrorMessage { get; set; }

    public string EmailConfirmLink { get; set; }

    protected override async Task OnInitializedAsync()
    {
        //Input = new RegisterInput();
    }

    public async Task RegisterUser() {

        if (Input == null
            || string.IsNullOrWhiteSpace(Input.Email)
            || string.IsNullOrWhiteSpace(Input.FullName)
            || string.IsNullOrWhiteSpace(Input.Password))
        {
            return;
        }

        ErrorMessage = "";
        IsSubmitting = true;
        StateHasChanged();

        // Password match
        if (!Input.Password.Equals(Input.ConfirmPassword)) {
            ErrorMessage = "Confirm Password doesn't match the Password";
            IsSubmitting = false;
            StateHasChanged();
            return;
        }
        // Check email
        var existUser = await UserService.GetUserByEmailAsync(Input.Email);
        if (existUser != null)
        {
            ErrorMessage = "Email is already registered. Pleas enter a new email or <a href='/account/forgot-password' class='alert-link'>Reset the password </a>.";
            IsSubmitting = false;
            StateHasChanged();
            return;
        }

        // create
        var user = new UserDto()
        {
            Username = Input.Email,
            FullName = Input.FullName,
            Email = Input.Email,
            Password = Input.Password
        };

        var result = await UserService.CreateUserAsync(user);
        if (!result.Succeeded)
        {
            ErrorMessage = "Unexpected Error. Sorry, something went wrong please try again later";
            IsSubmitting = false;
            StateHasChanged();
            return;
        }

        // Confirm email
        var token = await UserService.GenerateEmailConfirmationTokenAsync(result.Data);
        EmailConfirmLink = $"{Navigation.BaseUri}account/confirmemail?uid={result.Data}&token={HttpUtility.UrlEncode(token)}";

        // Send email and redirect
        EmailService.SendEmailConfirmation(Input.Email, Input.FullName, EmailConfirmLink);
        Navigation.NavigateTo($"/account/registerverify/{result.Data}?email={HttpUtility.UrlEncode(Input.Email)}");
    }

    public class RegisterInput
    {
        [Required(ErrorMessage = "Full Name is required")]
        [MinLength(6, ErrorMessage = "Full Name must be at least 6 characters")]
        public string FullName { get; set; }

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress]
        [MinLength(6, ErrorMessage = "Email must be at least 6 characters")]
        [StringLength(32, ErrorMessage = "Email too long (32 character limit)")]
        public string Email { get; set; }
        
        [Required(ErrorMessage = "Password is required")]
        [MinLength(6, ErrorMessage = "Password must be at least 8 characters")]
        [StringLength(32, ErrorMessage = "Password too long (32 character limit)")]
        public string Password { get; set; }

        [Required(ErrorMessage = "Confirm Password is required")]
        [CompareProperty("Password", ErrorMessage = "Confirm Password doesn't match the Password")]
        public string ConfirmPassword { get; set; }
    }
}