@page "/account/generateemailconfirmation"
@attribute [AllowAnonymous]
@layout EmptyLayout
@using System.ComponentModel.DataAnnotations
@using Core.Application.Services.IServices
@using Core.Application.Settings
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Hosting
@using System.Web
@using Microsoft.Extensions.Options
@using Web.WebApp.Components

@inject IUserService UserService;
@inject NavigationManager Navigation;
@inject IWebHostEnvironment HostEnvironment;
@inject IEmailService EmailService;
@inject IJSRuntime JsRuntime;
@inject IOptions<ReCaptchaSetting> ReCaptchaSetting

<MudContainer Class="mt-16" MaxWidth="MaxWidth.Small">
    <MudCard Outlined="true" Elevation="1" Class="rounded-lg p-3">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h5">Email Confirmation</MudText>
            </CardHeaderContent>
        </MudCardHeader>
       <MudCardContent>
           @if (IsSubmitted) {
                @if (!string.IsNullOrWhiteSpace(InfoMessage))
                {
                    <MudAlert Severity="Severity.Info">@((MarkupString)InfoMessage)</MudAlert>
                }
            } else {
                <div class="mb-3">Enter your email address to get a new verification link.</div>
                <EditForm Model="@Input" OnValidSubmit="@GenerateConfirmationEmail">
                    <DataAnnotationsValidator/>
                    <MudTextField Label="Email" @bind-Value="@Input.Email" For="@(() => Input.Email)" />
                    <div class="my-3">
                        <GoogleRecaptcha @ref="googleRecaptcha" SiteKey=@ReCaptchaSetting.Value.SiteKey SecretKey=@ReCaptchaSetting.Value.SecretKey OnCaptchaChanged="@OnCaptchaChanged" />
                    </div>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Disabled="@SubmitDisabled">
                        <span class="spinner-border spinner-border-sm" hidden="@(!IsSubmitting)" role="status" aria-hidden="true"></span>
                        <span>Get email verification link</span>
                    </MudButton>

                    @if (!string.IsNullOrWhiteSpace(InfoMessage))
                    {
                        <MudAlert Severity="Severity.Info">@((MarkupString)InfoMessage)</MudAlert>
                    }
                </EditForm>
            }
        </MudCardContent>
    </MudCard>
</MudContainer>
@* Debug only: print email confirmation link *@
@if (!string.IsNullOrWhiteSpace(EmailConfirmLink) && HostEnvironment.IsDevelopment())
{
    <textarea>@EmailConfirmLink</textarea>
}


@code {
    public ConfirmEmailInput Input { get; set; } = new ConfirmEmailInput();
    public bool IsSubmitting { get; set; }
    public bool IsSubmitted { get; set; }
    public bool SubmitDisabled { get; set; } = true;
    public string InfoMessage { get; set; }
    public string EmailConfirmLink { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "email")]
    public string Email { get; set; }

    GoogleRecaptcha googleRecaptcha;

    public void OnCaptchaChanged(bool isChecked)
    {
        SubmitDisabled = !isChecked;
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        if (!string.IsNullOrWhiteSpace(Email))
        {
            Input = new ConfirmEmailInput()
            {
                Email = Email
            };
        }
    }


    public async Task GenerateConfirmationEmail()
    {
        IsSubmitting = true;
        SubmitDisabled = true;

        var isValidCaptcha = await googleRecaptcha.ValidateCaptchaAsync();
        if (!isValidCaptcha)
        {
            IsSubmitting = false;
            return;
        }

        InfoMessage = "If your email is registered. Please check your inbox or spam folder, and click on the verification link.";

        var existUser = await UserService.GetUserByEmailAsync(Input.Email);
        if (existUser == null)
        {   // DOT NOT TELL the email is invalid
            IsSubmitting = false;
            SubmitDisabled = false;
            IsSubmitted = true;
            return;
        }

        if (UserService.IsEmailConfirmed(existUser.Id))
        {
            InfoMessage = "This email is already verified. <a href='/account/login'>Click here to log in</a>";
            IsSubmitting = false;
            IsSubmitted = true;
            return;
        }

        var token = await UserService.GenerateEmailConfirmationTokenAsync(existUser.Id);
        EmailConfirmLink = $"{Navigation.BaseUri}account/confirmemail?uid={existUser.Id}&token={HttpUtility.UrlEncode(token)}";
        var result = EmailService.SendEmailConfirmation(Input.Email, existUser.FullName, EmailConfirmLink);
        if (!result)
        {
            InfoMessage = "Sorry, something went wrong. Please try again later.";
        }
        IsSubmitting = false;
        SubmitDisabled = true;
        IsSubmitted = true;
    }

    public class ConfirmEmailInput
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress]
        [MinLength(6, ErrorMessage = "Email must be at least 6 characters")]
        [StringLength(32, ErrorMessage = "Email too long (32 character limit)")]
        public string Email { get; set; }
    }
}
