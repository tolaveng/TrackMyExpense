@page "/admin/users"
@attribute [Authorize(Roles = UserBaseRole.Admin)]

@using Core.Application.Common
@using Core.Application.Models
@using Core.Application.Services.IServices
@using Core.Domain.Constants
@inject IDialogService Dialog

@inject IUserService UserService;
@inject NavigationManager NavigationManager;


<MudContainer Class="mt-8" MaxWidth="@MaxWidth.ExtraLarge">
    <Breadcrumb IsAdmin="true">
        <BreadcrumbItem Icon="@Icons.Filled.People" Title="Accounts" />
    </Breadcrumb>
    <MudTable @ref="table" ServerData="@(new Func<TableState, Task<TableData<UserDto>>>(ServerReload))"
        Dense="true" FixedHeader="true" Hover="true" Breakpoint="Breakpoint.Sm" Striped="true"
        Loading="@loading" LoadingProgressColor="Color.Info"
        T= "UserDto" OnRowClick="OnRowClicked">
        <ToolBarContent>
            <MudText Typo="Typo.h6">User Management</MudText>
            <MudSpacer />
            <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortLabel="FullName" T="UserDto">Full Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="Email" T="UserDto">Email</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="PhoneNumber" T="UserDto">Phone</MudTableSortLabel></MudTh>
            <MudTh>Email Confirmed</MudTh>
            <MudTh>Phone Confirmed</MudTh>
            <MudTh>Account Disabled</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Full Name">@context.FullName</MudTd>
            <MudTd DataLabel="Email">@context.Email</MudTd>
            <MudTd DataLabel="Phone Number">@context.PhoneNumber</MudTd>
            <MudTd DataLabel="Email Confirmed" HideSmall="@true">
                @if(@context.EmailConfirmed)
                {
                    <MudIcon Icon="@Icons.Filled.Check" Title="Yes" />
                }
            </MudTd>
            <MudTd DataLabel="Phone Confirmed" HideSmall="@true">
                @if(@context.PhoneNumberConfirmed)
                {
                    <MudIcon Icon="@Icons.Filled.Check" Title="Yes" />
                }
            </MudTd>
            <MudTd DataLabel="Account Disabled" HideSmall="@true">
                @if(@context.IsDisabled)
                {
                    <MudIcon Icon="@Icons.Filled.Check" Color="Color.Warning" Title="Yes" />
                }
            </MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" aria-label="edit"
                Title="Edit" Color="Color.Primary" OnClick="@(() => EditRow(context.Id))" />
                &nbsp;
                <MudIconButton Icon="@Icons.Material.Filled.CreditCard" Size="Size.Small" aria-label="subscription"
                Title="Subscription" Color="Color.Primary" OnClick="@(() => NavigationManager.NavigateTo($"/admin/subscription/{context.Id}"))" />
            </MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudText>No matching records found</MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>
        <PagerContent>
            <MudTablePager HorizontalAlignment="HorizontalAlignment.Left" HideRowsPerPage="false" HidePageNumber="false"
                InfoFormat="@($"{totalItems} records")"/>
        </PagerContent>
</MudTable>
</MudContainer>


@code {
    private MudTable<UserDto> table;
    private int totalItems;
    private string searchString = null;
    private bool loading = true;
    private IEnumerable<UserDto> UserList = new List<UserDto>();


    private async Task<TableData<UserDto>> ServerReload(TableState state)
    {
        loading = true;
        var sortDirection = state.SortDirection == SortDirection.Descending ? Pagination.Descending : Pagination.Ascending;
        var pagination = new Pagination(state.Page, state.PageSize, state.SortLabel, sortDirection);
        var result = UserService.GetUsers(searchString, pagination);
        UserList = result.Data;
        totalItems = result.TotalCount;
        loading = false;
        return new TableData<UserDto>() {TotalItems = totalItems, Items = UserList};
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

    private void OnRowClicked(TableRowClickEventArgs<UserDto> tableRowClickEventArgs)
    {
    }

    private async Task EditRow(Guid id)
    {
        var parameters = new DialogParameters { ["UserId"] = id };
        var options = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = Dialog.Show<UserEditDialog>("Edit User Record", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled && result.Data != null)
        {
            await table.ReloadServerData();
        }
    }
}
