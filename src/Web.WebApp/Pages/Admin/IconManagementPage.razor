@page "/admin/icon-management"
@attribute [Authorize(Roles = UserBaseRole.Admin)]

@using Core.Application.Common
@using Core.Application.Mediator.Icons
@using Core.Application.Models
@using Core.Application.Providers.IProviders
@using Core.Application.Services.IServices
@using Core.Domain.Constants
@using Core.Domain.Enums
@using MediatR
@using Web.WebApp.Components.Dialogs

<MudContainer Class="mt-8" MaxWidth="@MaxWidth.ExtraLarge">
    <Breadcrumbs IsAdmin="true">
        <BreadcrumbsItem Icon="@Icons.Filled.Architecture" Title="Icon Management" />
    </Breadcrumbs>

    <MudTable @ref="table" ServerData="@(new Func<TableState, Task<TableData<IconDto>>>(ServerReload))"
        Dense="true" FixedHeader="true" Hover="true" Breakpoint="Breakpoint.Sm" Striped="true"
        Loading="@loading" LoadingProgressColor="Color.Info"
        T= "IconDto">
        <ToolBarContent>
            <MudSpacer />
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="@AddNew">
                Add Icon
            </MudButton>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Icon</MudTh>
            <MudTh><MudTableSortLabel SortLabel="Name" T="IconDto" InitialDirection="SortDirection.Ascending">Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="Path" T="IconDto">Path</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="IconType" T="IconDto">Type</MudTableSortLabel></MudTh>
            <MudTh>Hidden</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
         <RowTemplate>
            <MudTd DataLabel="Icon"><img src="@context.IconUrl"
                style="width: 24px; height: 24px;" /></MudTd>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Path">@context.Path</MudTd>
            <MudTd DataLabel="Type">@context.IconType</MudTd>
            <MudTd DataLabel="Hidden">
                @if(@context.IsHidden)
                {
                    <MudIcon Icon="@Icons.Filled.Check" Title="Hidden" />
                }
            </MudTd>
            <MudTd DataLabel="Actions">
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" aria-label="edit"
                    Title="Edit" Color="Color.Primary" OnClick="@(() => EditRow(context.Id))" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" aria-label="delete"
                    Title="Delete" OnClick="@(() => DeleteRow(context.Id, context.IconType, context.Path))" />
            </MudTd>
         </RowTemplate>
         <NoRecordsContent>
            <MudText>No matching records found</MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>
        <PagerContent>
            <MudTablePager HorizontalAlignment="HorizontalAlignment.Left" HideRowsPerPage="false" HidePageNumber="false"
                InfoFormat="@($"{TotalItems} records")"/>
        </PagerContent>
    </MudTable>
</MudContainer>

@code {
    [Inject] ISnackbar Snackbar { get; set; }
    [Inject] IMediator Mediator { get; set; }
    [Inject] IDialogService Dialog { get; set; }
    [Inject] NavigationManager NavigationManager { get; set; }
    [Inject] IFileUploadFactory FileUploadFactory { get; set; }

    private MudTable<IconDto> table;
    private bool loading = true;
    private int TotalItems;


    private async Task<TableData<IconDto>> ServerReload(TableState state)
    {
        loading = true;
        var pagination = new Pagination(state.Page, state.PageSize, state.SortLabel,
            state.SortDirection == SortDirection.Descending ? Pagination.Descending : Pagination.Ascending);

        var result = await Mediator.Send(new GetIconsPaged()
        {
            Pagination = pagination
        });
        TotalItems = result.TotalCount;
        loading = false;
        return new TableData<IconDto>() {TotalItems = result.TotalCount, Items = result.Data};
    }

    private async Task AddNew()
    {
        var dialogParams = new DialogParameters {
            ["IconId"] = Guid.Empty,
        };
        var options = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = Dialog.Show<IconEditDialog>("New Icon", dialogParams, options);
        var result = await dialog.Result;
        if (!result.Cancelled && result.Data != null)
        {
            await table.ReloadServerData();
        }
    }

    private async Task EditRow(Guid iconId)
    {
        var parameters = new DialogParameters {
            ["IconId"] = iconId,
        };
        var options = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = Dialog.Show<IconEditDialog>("Edit Icon", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled && result.Data != null)
        {
            await table.ReloadServerData();
        }
    }

    private async Task DeleteRow(Guid iconId, IconType iconType, string iconPath)
    {
        Snackbar.Clear();
        if (iconType == IconType.Asset)
        {
            Snackbar.Add("Asset Icon cannot be deleted.", Severity.Error);
            return;
        }

        var dialogParams = new DialogParameters() {
            ["Message"] = "Are you sure you want to delete this icon?",
            ["Color"] = Color.Error,
            ["PrimaryButtonText"] = "Delete"
        };
        var dialog = Dialog.Show<ConfirmDialog>("Delete Icon", dialogParams);
        var result = await dialog.Result;
        if (result.Cancelled) return;
        try
        {
            var deleted = await Mediator.Send(new DeleteIconCommand(iconId));
            if (deleted)
            {
                if (iconType == IconType.Upload)
                {
                    var fileUploadService = FileUploadFactory.GetFileUploadService();
                    await fileUploadService.DeleteIconFileAsync(iconPath);   
                }
                await table.ReloadServerData();
                Snackbar.Add("Icon has been deleted successfully.", Severity.Success);
            }
        } catch (Exception)
        {
            Snackbar.Add("Sorry, cannot delete the icon. Please try again later", Severity.Error);
        }
    }
}
