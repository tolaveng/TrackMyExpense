@using Core.Application.Models
@using System.ComponentModel.DataAnnotations
@using Core.Application.Services.IServices
@using Web.WebApp.Components.Dialogs

@inject IDialogService Dialog
@inject IUserService UserService;

<MudDialog>
    <DialogContent>
        <EditForm EditContext="@editContext">
            <DataAnnotationsValidator/>
            @*<ValidationSummary />*@
            <MudGrid>
                <MudItem xs="12" sm="8">
                    <MudTextField Label="Full Name" @bind-Value="@userModel.FullName" For="@(() => userModel.FullName)" />
                </MudItem>
                <MudItem xs="12" sm="4"></MudItem>
            
                <MudItem xs="12" sm="8">
                    <MudTextField ReadOnly="true" Disabled="true" Label="Email" @bind-Value="@userModel.Email" For="@(() => userModel.Email)" />
                </MudItem>
                <MudItem xs="12" sm="4" Style="display:flex; padding-bottom: 0;">
                    <MudCheckBox ReadOnly="true" Disabled="true" Dense="true" Label="Email Confirmed" @bind-Checked="@userModel.EmailConfirmed" For="@(() => userModel.EmailConfirmed)" />
                </MudItem>
            
                <MudItem xs="12" sm="8">
                    <MudTextField Label="Phone" @bind-Value="@userModel.PhoneNumber" For="@(() => userModel.PhoneNumber)" />
                </MudItem>
                <MudItem xs="12" sm="4" Style="display:flex; padding-bottom: 0;">
                    <MudCheckBox ReadOnly="true" Disabled="true" Dense="true" Label="Phone Confirmed" @bind-Checked="@userModel.PhoneConfirmed" For="@(() => userModel.PhoneConfirmed)" />
                </MudItem>
            </MudGrid>
            <div class="mt-4">
                <MudText Color="@Color.Warning">Account Status</MudText>
                <MudCheckBox Dense="true" Label="Account Disabled" @bind-Checked="@userModel.IsDisabled" For="@(() => userModel.IsDisabled)"  Color="@Color.Warning" />
            </div>
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="OnCloseClicked">Close</MudButton>
        <MudButton Color="@Color.Primary" Variant="Variant.Filled" OnClick="OnSaveClicked">Save</MudButton>
    </DialogActions>
</MudDialog>


@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public Guid UserId { get; set; } = Guid.Empty;

    private EditContext editContext;
    private UserModel userModel;
    
    protected override Task OnInitializedAsync()
    {   
        userModel = new UserModel();
        editContext = new EditContext(userModel);

        if (UserId == Guid.Empty)
        {
            Dialog.Show<AlertDialog>("", 
                new DialogParameters(){["Message"] = "Sorry, something went wrong. Cannot open user."});
            MudDialog.Cancel();
        }

        var user = UserService.GetById(UserId);
        if (user == null)
        {
            Dialog.Show<AlertDialog>("", 
                new DialogParameters(){["Message"] = "Sorry, something went wrong. Cannot open user."});
            MudDialog.Cancel();
        }

        userModel = new UserModel()
        {
            Id = user.Id,
            FullName = user.FullName,
            Email = user.Email,
            EmailConfirmed = user.EmailConfirmed,
            PhoneNumber = user.PhoneNumber,
            PhoneConfirmed = user.PhoneNumberConfirmed,
            IsDisabled = user.IsDisabled,
        };
        editContext = new EditContext(userModel);

        return base.OnInitializedAsync();
    }

    private void OnCloseClicked() => MudDialog.Cancel();
    private async Task OnSaveClicked() {
        if (editContext.Validate())
        {
            var user = UserService.GetById(UserId);
            user.FullName = userModel.FullName;
            //user.Email = userModel.Email;
            user.PhoneNumber = userModel.PhoneNumber;
            user.IsDisabled = userModel.IsDisabled;

            await UserService.UpdateUserAsync(user);

            MudDialog.Close(DialogResult.Ok(true));
        }
    }


    public class UserModel
    {
        public Guid Id { get; set; }
        public string Username { get; set; }

        [Required(ErrorMessage = "Full Name is required")]
        [MinLength(6, ErrorMessage = "Full Name must be at least 6 characters")]
        public string FullName { get; set; } 

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress]
        [MinLength(6, ErrorMessage = "Email must be at least 6 characters")]
        [StringLength(32, ErrorMessage = "Email too long (32 character limit)")]
        public string Email { get; set; }
        public bool EmailConfirmed { get; set; }

        public string PhoneNumber { get; set; }
        public bool PhoneConfirmed { get; set; }
        public bool IsDisabled { get; set; }
    }
}