@page "/admin/subscription/{userid}"
@attribute [Authorize(Roles = UserBaseRole.Admin)]

@using Core.Application.Common
@using Core.Application.IRepositories
@using Core.Application.Models
@using Core.Application.Mediator.Subscriptions
@using Core.Domain.Constants
@using System.Linq.Expressions
@using Core.Domain.Entities
@using Core.Domain.Enums
@using MediatR
@using Web.WebApp.Components.Dialogs


<MudContainer Class="mt-8" MaxWidth="@MaxWidth.ExtraLarge">
    <Breadcrumbs IsAdmin="true">
        <BreadcrumbsItem Icon="@Icons.Filled.People" Title="Users" Href="/admin/users" />
        <BreadcrumbsItem Icon="@Icons.Filled.CreditCard" Title="Subscriptions" />
    </Breadcrumbs>

    <MudTable @ref="table" ServerData="@(new Func<TableState, Task<TableData<SubscriptionDto>>>(ServerReload))"
        Dense="true" FixedHeader="true" Hover="true" Breakpoint="Breakpoint.Sm" Striped="true"
        Loading="@loading" LoadingProgressColor="Color.Info"
        T= "SubscriptionDto">
        <ToolBarContent>
            @*
            <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" />
            *@
            <MudSpacer />
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="@AddNew">
                Add Subscription
            </MudButton>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortLabel="SubscriptionType" T="SubscriptionDto">Subscription</MudTableSortLabel></MudTh>
            <MudTh>Amount</MudTh>
            <MudTh><MudTableSortLabel SortLabel="PaidDate" T="SubscriptionDto">Paid Date</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="Begin" T="SubscriptionDto">Begin</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="End" T="SubscriptionDto">End</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="IsCanceled" T="SubscriptionDto">Canceled</MudTableSortLabel></MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Subscription Type">@context.SubscriptionType</MudTd>
            <MudTd DataLabel="Amount">@context.PaidAmount</MudTd>
            <MudTd DataLabel="Paid Date" HideSmall="@true">@context.PaidDate?.ToString("dd/MM/yyyy")</MudTd>
            <MudTd DataLabel="Begin" HideSmall="@true">@context.Begin?.ToString("dd/MM/yyyy")</MudTd>
            <MudTd DataLabel="End" HideSmall="@true">@context.End?.ToString("dd/MM/yyyy")</MudTd>
            <MudTd DataLabel="Canceled" HideSmall="@true">
                @if(@context.IsCanceled)
                {
                    <MudText Color="@Color.Warning">Cancelled</MudText>
                }
            </MudTd>
            <MudTd DataLabel="Actions">
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" aria-label="edit"
                    Title="Edit" Color="Color.Primary" OnClick="@(() => EditRow(context.Id))" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" aria-label="delete"
                    Title="Delete" OnClick="@(() => DeleteRow(context.Id))" />
            </MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudText>No matching records found</MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>
        <PagerContent>
            <MudTablePager HorizontalAlignment="HorizontalAlignment.Left" HideRowsPerPage="false" HidePageNumber="false"
                InfoFormat="@($"{TotalItems} records")"/>
        </PagerContent>
    </MudTable>
</MudContainer>

@code {
    [Inject] ISnackbar Snackbar { get; set; }
    [Inject] IMediator Mediator { get; set; }
    [Inject] IDialogService Dialog { get; set; }
    [Inject] NavigationManager NavigationManager { get; set; }

    [Parameter]
    public string UserId { get; set; }

    private MudTable<SubscriptionDto> table;
    private int TotalItems;
    private string searchString = null;
    private bool loading = true;
    private Guid userGuidId;

    private async Task<TableData<SubscriptionDto>> ServerReload(TableState state)
    {

        if (!Guid.TryParse(UserId, out userGuidId)) {
            NavigationManager.NavigateTo("/pagenotfound");
            return new TableData<SubscriptionDto>();
        };
        loading = true;

        var pagination = new Pagination(state.Page, state.PageSize, state.SortLabel,
            state.SortDirection == SortDirection.Descending ? Pagination.Descending : Pagination.Ascending);

        var result = await Mediator.Send(new GetSubscriptionsPaged()
        {
            UserId = userGuidId,
            Pagination = pagination
        });
        TotalItems = result.TotalCount;
        loading = false;
        return new TableData<SubscriptionDto>() {TotalItems = result.TotalCount, Items = result.Data};
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

    private async Task EditRow(Guid subscriptionId)
    {
        var parameters = new DialogParameters {
            ["SubscriptionId"] = subscriptionId,
            ["UserId"] = userGuidId
        };
        var options = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = Dialog.Show<SubscriptionEditDialog>("Edit Subscription", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled && result.Data != null)
        {
            await table.ReloadServerData();
        }
    }

    private async Task DeleteRow(Guid subscriptionId)
    {
        var dialogParams = new DialogParameters() {
            ["Message"] = "Are you sure you want to delete this subscription?",
            ["Color"] = Color.Error,
            ["PrimaryButtonText"] = "Delete"
        };
        var dialog = Dialog.Show<ConfirmDialog>("Delete Subscription", dialogParams);
        var result = await dialog.Result;
        if (result.Cancelled) return;
        try
        {
            var deleted = await Mediator.Send(new DeleteSubscriptionCommand(subscriptionId));
            if (deleted)
            {
                await table.ReloadServerData();
                Snackbar.Add("Subscription has been deleted successfully.", Severity.Success);
            }
        } catch (Exception)
        {
            Snackbar.Add("Sorry, cannot delete the subscription. Please try again later", Severity.Error);
        }
    }

    private async Task AddNew()
    {
        var dialogParams = new DialogParameters {
            ["SubscriptionId"] = Guid.Empty,
            ["UserId"] = userGuidId
        };
        var options = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = Dialog.Show<SubscriptionEditDialog>("New Subscription", dialogParams, options);
        var result = await dialog.Result;
        if (!result.Cancelled && result.Data != null)
        {
            await table.ReloadServerData();
        }
    }
}
