@using System.IO
<div @key="@File.FileName" class=@($"fileUploader-item {GetClassName()}") @onclick="@OnImageClicked">
    @if (OnRemove.HasDelegate) {
    <MudIconButton Class="fileUploader-item-icon" Icon="@Icons.Material.Filled.Close" Color="@Color.Error"
        Size="Size.Small" aria-label="Remove" Title="Remove" OnClick="@OnRemoveClicked" />
    }
    <span class="fileUploader-file-name">@File.Name</span>
</div>

@code {
    [Inject] IDialogService Dialog { get; set; }

    [Parameter]
    public FileUploaderFile File  { get; set; }

    [Parameter]
    public EventCallback<FileUploaderFile> OnRemove { get; set; }


    private string GetClassName()
    {
        if (string.IsNullOrEmpty(File.FileName)) return "";
        var ext = Path.GetExtension(File.FileName).ToLowerInvariant().Replace(".", "-");
        return $"fileUploader{ext}";
    }

    private async Task OnRemoveClicked()
    {
        if (OnRemove.HasDelegate)
        {
            await OnRemove.InvokeAsync(File);
        }
    }

    private async Task OnImageClicked()
    {
        var parameters = new DialogParameters {
            ["File"] = File,
            ["OnRemove"] = OnRemove
        };
        var options = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = Dialog.Show<FileUploaderPreviewDialog>(File.Name, parameters, options);
    }
}
