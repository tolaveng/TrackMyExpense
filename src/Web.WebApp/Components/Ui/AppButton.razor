<MudButton Variant="@(IsOutline ? Variant.Outlined : Variant.Filled)"
    ButtonType = "@GetButtonType()"
    Color="@Color"
    Disabled="@(IsDisabled || IsLoading)"
    StartIcon="@Icon"
    OnClick="@OnClicked"
    Style="text-transform:none"
>
    <MudText>@Text</MudText>
    @if (IsLoading) {
        <MudText>&nbsp;</MudText>
        <MudProgressCircular Size="Size.Small" Color="Color.Tertiary" Indeterminate="true" />
    }
</MudButton>

@code {
    [Parameter] public string Text { get; set; }
    [Parameter] public string Type { get; set; } = "button";
    [Parameter] public Color Color { get; set; } = Color.Default;
    [Parameter] public string Icon { get; set; }
    [Parameter] public bool IsDisabled { get; set; }
    [Parameter] public bool IsLoading { get; set; }
    [Parameter] public bool IsOutline { get; set; }

    [Parameter] public EventCallback<MouseEventArgs> OnClick { get; set; }

    private ButtonType GetButtonType()
    {
        return Type switch
        {
            "submit" => ButtonType.Submit,
            "reset" => ButtonType.Reset,
            _ => ButtonType.Button
        };
    }

    private async Task OnClicked(MouseEventArgs e)
    {
        if (OnClick.HasDelegate && !IsLoading && !IsDisabled)
        {
            await OnClick.InvokeAsync(e);
        }
    }
}
