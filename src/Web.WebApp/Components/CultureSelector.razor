@using System.Globalization
@using System.Linq.Expressions
<MudSelect T="string" Label="@Label" Class="@Class" Value="@Value" For="@For"
ValueChanged="ValueChanged"  AnchorOrigin="Origin.BottomCenter"
>
@if (cultures != null)
{
    foreach(var culture in cultures)
    {
        <MudSelectItem Value="@culture.Name">@culture.EnglishName - @culture.CurrencySymbol -
             @culture.DateTimeFormat (@(dateTimeSample.ToString(culture.DateTimeFormat)))
        </MudSelectItem>
    }
}
</MudSelect>

@code {
    [Parameter] public string Label { get; set; }
    [Parameter] public string Class { get; set; }
    [Parameter] public string Value { get; set; }
    [Parameter] public EventCallback<string> ValueChanged { get; set; }
    [Parameter] public Expression<Func<string>> For { get; set; }
    [Parameter] public DateTime? DateTimeSample { get; set; }

    private DateTime dateTimeSample = new DateTime(2000, 12, 31, 13, 00, 00, DateTimeKind.Unspecified);
    private CultureModel[] cultures;

    protected override void OnInitialized()
    {
        if (DateTimeSample != null) {
            dateTimeSample = DateTimeSample.Value;
        }

        // CultureInfo.GetCultures
        var cultureInfos = CultureInfo.GetCultures(CultureTypes.SpecificCultures);
        cultures = cultureInfos.Select(x => new CultureModel()
            {
                // remove mark char letter ie. U+200F
                DateTimeFormat = new string(x.DateTimeFormat.ShortDatePattern.Where(z => char.IsAscii(z)).ToArray()),
                CurrencySymbol = new RegionInfo(x.LCID).CurrencySymbol,
                Name = x.Name,
                EnglishName = x.EnglishName
            })
        .OrderBy(x => x.Name).ToArray();
    }

    public class CultureModel
    {
        public string DateTimeFormat { get; set; }
        public string CurrencySymbol { get; set; }
        public string Name { get; set; }
        public string EnglishName { get; set; }
    }
}
