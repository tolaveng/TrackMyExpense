@using Core.Application.Mediator.Users
@using MediatR
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
<MudDialog>
    <DialogContent>
        <MudText>@((MarkupString)Message)</MudText>
        <MudTextField Label="Password" @bind-Value="@password" Immediate="true"
        InputType="passwordInput" Class="mb-3" OnKeyPress="PasswordInputKeyPress"
        Adornment="Adornment.End" AdornmentIcon="@passwordInputIcon" OnAdornmentClick="PasswordInputIconClick"/>
        @if (!string.IsNullOrWhiteSpace(errorText))
        {
            <MudText Color="@Color.Error" Typo="Typo.body2" >@errorText</MudText>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="OnSecondaryButtonClicked">@SecondaryButtonText</MudButton>
        <MudButton Color="@Color" Variant="Variant.Filled" OnClick="OnPrimaryButtonClicked"
        Disabled="@(string.IsNullOrWhiteSpace(password))"
        >
            @PrimaryButtonText
        </MudButton>
    </DialogActions>
</MudDialog>
@code {
    [Inject] IMediator Mediator { get; set; }
    [Inject] ProtectedSessionStorage BrowserStorage { get; set; }

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public Guid UserId { get; set; }
    [Parameter] public string Message { get; set; }

    [Parameter] public string SecondaryButtonText { get; set; } = "Cancel";
    [Parameter] public string PrimaryButtonText { get; set; } = "Confirm";

    [Parameter] public Color Color { get; set; } = Color.Primary;

    private bool isSubmitting = false;
    private string errorText = "";

    private string password;
    private bool isPasswordInputType = true;
    private InputType passwordInput = InputType.Password;
    private string passwordInputIcon = Icons.Material.Filled.VisibilityOff;

    private string PasswordAttemptName => $"{UserId}-PasswordAttemptCount";

    void OnSecondaryButtonClicked() => MudDialog.Cancel();

    async void OnPrimaryButtonClicked() {
        if (string.IsNullOrWhiteSpace(password)) {
            errorText = "Password is required";
            return;
        }

        isSubmitting = true;
        errorText = string.Empty;

        // Just scare the user only
        var passwordAttemptCount = await BrowserStorage.GetAsync<int>(PasswordAttemptName);
        if (passwordAttemptCount.Success && passwordAttemptCount.Value > 5)
        {
            errorText = "Too many attempts. Please try again later.";
            isSubmitting = false;
            StateHasChanged();
            return;
        }
        else
        {
            await BrowserStorage.SetAsync(PasswordAttemptName, passwordAttemptCount.Value + 1);
        }

        var isValid = await Mediator.Send(new CheckUserPasswordRequest(UserId, password));
        if (isValid)
        {
            MudDialog.Close(DialogResult.Ok(true));
            return;
        }

        errorText = "Password is correct";
        isSubmitting = false;
        StateHasChanged();
    }

    void PasswordInputKeyPress(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            OnPrimaryButtonClicked();
        }
    }

    void PasswordInputIconClick()
    {
        @if (isPasswordInputType)
        {
            isPasswordInputType = true;
            passwordInputIcon = Icons.Material.Filled.Visibility;
            passwordInput = InputType.Text;
        }
        else {
            isPasswordInputType = false;
            passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            passwordInput = InputType.Password;
        }
    }

}
